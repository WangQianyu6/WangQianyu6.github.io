<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据科学与工程学院暑期夏令营实践项目</title>
      <link href="/posts/8e58660f.html"/>
      <url>/posts/8e58660f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="为什么选择Hexo？"><a href="#为什么选择Hexo？" class="headerlink" title="为什么选择Hexo？"></a>为什么选择Hexo？</h1><p>&ensp;&ensp;&ensp;&ensp;Hexo 是一个基于 Node.js 的静态博客生成工具，它提供了简洁的命令行界面和易于理解的配置文件。</p><p>&ensp;&ensp;&ensp;&ensp;Hexo 拥有活跃的社区，提供了大量的主题和插件，可以轻松实现各种功能和样式定制。</p><p>&ensp;&ensp;&ensp;&ensp;Hexo 生成的是静态网页文件，不需要依赖数据库和服务器端代码，因此具有较高的安全性。</p><h1 id="为什么选择Butterfly？"><a href="#为什么选择Butterfly？" class="headerlink" title="为什么选择Butterfly？"></a>为什么选择Butterfly？</h1><p>&ensp;&ensp;我选择了Butterfly主题，Butterfly是一个自定义性非常高的主题，并且有大量的用户使用，生态非常完善。选取原因如下：</p><ul><li><p>美观现代化</p><p>&ensp;&ensp;&ensp;&ensp;时尚、美观和现代化的设计风格，吸引人的界面和布局，能够给读者留下深刻的印象。</p></li><li><p>响应式设计</p><p>&ensp;&ensp;&ensp;&ensp;采用响应式设计，可以在各种设备和屏幕尺寸上提供良好的用户体验。可以在桌面、平板电脑和手机等设备上自适应地显示，读者可以随时随地访问你的博客。</p></li><li><p>可定制性</p><p>&ensp;&ensp;&ensp;&ensp;主题提供了丰富的定制选项，允许自定义博客的外观和功能.可以调整颜色、字体、布局等方面的设置。</p></li><li><p>多样布局和组件</p><p>&ensp;&ensp;&ensp;&ensp;Butterfly主题提供了多种布局和组件选项，如卡片式布局、侧边栏、标签云、作者简介等，根据内容类型和需要创建丰富多样的页面。</p></li><li><p>文档和支持</p><p>&ensp;&ensp;&ensp;&ensp;详细的文档和支持资源，支持 Latex 编写，Mermaid 流程图等附加的 Markdown 功能。</p></li></ul><h1 id="页面布局及实现"><a href="#页面布局及实现" class="headerlink" title="页面布局及实现"></a>页面布局及实现</h1><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>&ensp;&ensp;&ensp;&ensp;导航栏位于页面的顶部，用于提供网站的导航链接，快速导航到所需的内容，包括主页，博文（分类、标签、归档），生活（追番），友链，留言板，关于笔者。</p><details class="folding-tag" radio blue><summary> 点击查看 导航栏 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18c1dab470.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" radio blue><summary> 点击查看 主页 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18ca766829.jpeg" alt=""></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18c43aff9f.png" alt=""></p>              </div>            </details><details class="folding-tag" radio blue><summary> 点击查看 博文 </summary>              <div class='content'>              <p>分类</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18d3b453cf.png" alt=""></p><p>标签</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18d3b522a5.png" alt=""></p><p>归档</p><p><details class="folding-tag" cyan red><summary> 查看实现方法 </summary>              <div class='content'>              <p><a href="https://www.bilibili.com/video/BV1nd4y1A7Wt/?spm_id_from=333.788&amp;vd_source=d53236894d2dc00540b94b714b873614">丝滑配置</a></p>              </div>            </details></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b18d3add1c0.png" alt=""></p>              </div>            </details><details class="folding-tag" radio blue><summary> 点击查看 生活 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b213cc19455.png" alt=""></p>              </div>            </details><p>友链：展示与其他博客主或网站建立的友情链接以及有用的网站链接！</p><details class="folding-tag" radio blue><summary> 点击查看 友链 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b213cc44c2b.png" alt=""></p>              </div>            </details><p>&ensp;&ensp;&ensp;&ensp;Butterfly添加不同的友链预览并提供了详细的教程。步骤包括在友链页面中添加预览效果、配置默认友链页面以及在主题配置文件中进行参数设置等。同时，作者还分享了自己写的教程并提供了一些替换注释的技巧，以确保友链卡片的样式正确显示。</p><details class="folding-tag" cyan red><summary> 查看友链实现方法 </summary>              <div class='content'>              <p><a href="https://blog.anheyu.com/posts/292d.html">友链特效</a></p>              </div>            </details><details class="folding-tag" radio blue><summary> 点击查看 留言板 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b213cc4350a.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan red><summary> 查看留言板实现方法 </summary>              <div class='content'>              <p><a href="https://blog.anheyu.com/posts/sdxhu.html">留言板</a></p>              </div>            </details><details class="folding-tag" radio blue><summary> 点击查看 关于笔者 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b213cc60171.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan red><summary> 查看导航栏实现方法 </summary>              <div class='content'>              <p>在主题配置文件修改目录</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b231cf788ca.jpeg" alt=""></p>              </div>            </details><h2 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h2><details class="folding-tag" radio blue><summary> 点击查看 主页详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b218006af50.png" alt=""></p>              </div>            </details><h3 id="顶部缩略主页"><a href="#顶部缩略主页" class="headerlink" title="顶部缩略主页"></a>顶部缩略主页</h3><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b2532f93ba9.jpeg" alt=""></p><h4 id="随便逛逛"><a href="#随便逛逛" class="headerlink" title="随便逛逛"></a>随便逛逛</h4><p>&ensp;&ensp;&ensp;&ensp;点击随机跳转到一篇文章。</p><h4 id="分类栏"><a href="#分类栏" class="headerlink" title="分类栏"></a>分类栏</h4><p>&ensp;&ensp;&ensp;&ensp;提供了三个分类项目可随意点击，鼠标移动到上方有动画显示，点击可查看分类归档。</p><details class="folding-tag" radio blue><summary> 点击查看 分类归档 </summary>              <div class='content'>              <p><img src="/Users/quinn/Library/Application Support/typora-user-images/image-20230715122452920.png" alt="image-20230715122452920"></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b21d515edf8.png" alt=""></p>              </div>            </details><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><p>&ensp;&ensp;&ensp;&ensp;选择推荐文章进行轮换播放，点击可查看文章详情。</p><h4 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h4><p>&ensp;&ensp;&ensp;&ensp;下面四个小分栏是推荐文章列表，点击可查看文章详情。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><details class="folding-tag" cyan open red><summary> 查看实现方法 </summary>              <div class='content'>              <p>本站首页 <code>Swiper Bar</code> 修改请参考 <a href="https://www.npmjs.com/package/hexo-butterfly-swiper-anzhiyu-pro">hexo-butterfly-swiper-anzhiyu-pro</a> 文档自行修改。</p><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">命令</button></li><li class="tab"><button type="button" data-href="#test-2">配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在<code>_config.butterfly.yml</code>加入以下配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">大学学习史</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">前端成长历程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">生活欢乐多</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="分类卡片"><a href="#分类卡片" class="headerlink" title="分类卡片"></a>分类卡片</h3><p>&ensp;&ensp;&ensp;&ensp;点击可进入查看分类归档。</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b21e7608ce8.jpeg" alt=""></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><details class="folding-tag" cyan open red><summary> 查看实现方法 </summary>              <div class='content'>              <p>详情请看教程<a href="https://blog.anheyu.com/posts/sdxhu.html"> Categories Magnet</a></p><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">命令</button></li><li class="tab"><button type="button" data-href="#test-2">配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在<code>_config.butterfly.yml</code>加入以下配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">大学学习史</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">前端成长历程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">生活欢乐多</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://cdn.cbd.int/akilar-candyassets@1.0.36/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h3><details class="folding-tag" radio blue><summary> 点击查看 文章列表 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b21f410db71.jpeg" alt=""></p>              </div>            </details><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>&ensp;&ensp;&ensp;&ensp;Butterfly自带。</p><h3 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h3><p>&ensp;&ensp;&ensp;&ensp;左下角拉开可看。</p><details class="folding-tag" radio blue><summary> 点击查看 音乐列表 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b224329207e.jpeg" alt=""></p>              </div>            </details><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><details class="folding-tag" cyan red><summary> 查看实现方法 </summary>              <div class='content'>              <p><a href="https://www.bilibili.com/video/BV1rS4y1W78M/?p=8&amp;spm_id_from=pageDriver">教程</a></p>              </div>            </details><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b2243292224.jpeg" alt=""></p><p>可设置为文章阅读模式，夜间模式，宽屏模式，评论和回到顶部。</p><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><p>&ensp;&ensp;&ensp;&ensp;Butterfly自带。</p><h2 id="文章页面布局"><a href="#文章页面布局" class="headerlink" title="文章页面布局"></a>文章页面布局</h2><p>由大标题、中标题、小标题、链接以及代码块、正文组成。</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b221d47ca6b.png" alt=""></p><h3 id="版权说明"><a href="#版权说明" class="headerlink" title="版权说明"></a>版权说明</h3><details class="folding-tag" radio blue><summary> 点击查看 详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24a134e77d.jpeg" alt=""></p>              </div>            </details><h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><details class="folding-tag" radio blue><summary> 点击查看 详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24af2b8a42.jpeg" alt=""></p>              </div>            </details><h3 id="推荐文章模块"><a href="#推荐文章模块" class="headerlink" title="推荐文章模块"></a>推荐文章模块</h3><details class="folding-tag" radio blue><summary> 点击查看 详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24bd755647.jpeg" alt=""></p>              </div>            </details><h3 id="文章侧边栏"><a href="#文章侧边栏" class="headerlink" title="文章侧边栏"></a>文章侧边栏</h3><details class="folding-tag" radio blue><summary> 点击查看 文章详页面 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24c1fe2f96.jpeg" alt=""></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24c229331f.jpeg" alt=""></p>              </div>            </details><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><details class="folding-tag" cyan red><summary> 查看实现方法 </summary>              <div class='content'>              <p><a href="https://blog.anheyu.com/posts/sdxhu.html">教程</a></p>              </div>            </details><h2 id="主页侧边栏"><a href="#主页侧边栏" class="headerlink" title="主页侧边栏"></a>主页侧边栏</h2><h3 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h3><details class="folding-tag" radio blue><summary> 点击查看 文章详页面 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b244817c4b7.jpeg" alt=""></p>              </div>            </details><h3 id="网站公告"><a href="#网站公告" class="headerlink" title="网站公告"></a>网站公告</h3><details class="folding-tag" radio blue><summary> 点击查看 网站公告 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b2465e96602.jpeg" alt=""></p>              </div>            </details><h3 id="电子钟"><a href="#电子钟" class="headerlink" title="电子钟"></a>电子钟</h3><details class="folding-tag" radio blue><summary> 点击查看 电子钟 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b24481795ed.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan red><summary> 查看实现方法 </summary>              <div class='content'>              <p><a href="https://www.bilibili.com/video/BV1MB4y147FW/?spm_id_from=333.788&amp;vd_source=d53236894d2dc00540b94b714b873614">电子钟配置</a></p>              </div>            </details><h3 id="分类标签归档"><a href="#分类标签归档" class="headerlink" title="分类标签归档"></a>分类标签归档</h3><details class="folding-tag" radio blue><summary> 点击查看 详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b247dab497d.jpeg" alt=""></p>              </div>            </details><h3 id="网站咨询"><a href="#网站咨询" class="headerlink" title="网站咨询"></a>网站咨询</h3><details class="folding-tag" radio blue><summary> 点击查看 详情 </summary>              <div class='content'>              <p><img src="https://img01.anheyu.com/useruploads/215/2023/07/15/64b244817ab6c.jpeg" alt=""></p>              </div>            </details><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><details class="folding-tag" cyan red><summary> 查看实现方法 </summary>              <div class='content'>              <p><a href="https://blog.anheyu.com/posts/sdxhu.html">教程</a></p>              </div>            </details><h1 id="涉及技术"><a href="#涉及技术" class="headerlink" title="涉及技术"></a>涉及技术</h1><div class='checkbox blue'><input type="radio" />            <p>博客框架：<a href="https://github.com/hexojs/hexo">Hexo 6.3.0</a></p>            </div> <div class='checkbox blue'><input type="radio" />            <p>主题：<a href="https://butterfly.js.org/">Butterfly 4.3.1</a></p>            </div> <div class='checkbox blue'><input type="radio" />            <p>评论系统：<a href="https://twikoo.js.org/">valine</a>系统</p>            </div> <div class='checkbox blue'><input type="radio" />            <p>图床：<a href="https://bitiful.dogecast.com/buckets">安知鱼图床</a></p>            </div> <div class='checkbox blue'><input type="radio" />            <p>开发语言：HTML5 + CSS3 + JavaScript + Pug + YML</p>            </div> <h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>&ensp;&ensp;&ensp;&ensp;是一种在 GitHub 上自动化、定制和执行软件开发工作流程的功能。它可以帮助你在不同的事件（例如代码提交、拉取请求或标签创建）上触发不同的任务（例如构建、测试或部署）。</p><h2 id="GitHub-Page"><a href="#GitHub-Page" class="headerlink" title="GitHub Page"></a>GitHub Page</h2><p>&ensp;&ensp;&ensp;&ensp;是GitHub提供的静态网页托管服务，它允许用户通过GitHub仓库来托管和发布自己的静态网页。</p><h1 id="博客制作过程中遇到的问题及其解决方法"><a href="#博客制作过程中遇到的问题及其解决方法" class="headerlink" title="博客制作过程中遇到的问题及其解决方法"></a>博客制作过程中遇到的问题及其解决方法</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>&ensp;&ensp;&ensp;&ensp;将基于hexo的博客部署到github的时候出现了下面Error: Spawn failed的错误。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Errors Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess,&lt;anonymous&gt; (/Users/quinn/Desktop/Blog/node_1/lib/spawn js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess,emit (node;events:513:28)</span></span><br><span class="line"><span class="string">    at ChildProcess,_handle,onexit(node:internal/child_process:291:12)</span></span><br></pre></td></tr></table></figure><h3 id="查找问题"><a href="#查找问题" class="headerlink" title="查找问题"></a>查找问题</h3><p>&ensp;&ensp;&ensp;&ensp;根据报错信息，可能出现以下问题导致无法从远程仓库读取或发生生成错误：</p><ol><li>访问权限问题：没具有正确的访问权限来读取远程仓库。私有仓库在终端中配置的用户名、密码、SSH 密钥或访问令牌是。</li><li>网络连接问题：报错中的 “Spawn failed” 可能是由于网络连接问题导致无法与远程仓库进行通信。请检查你的网络连接，并确保可以访问远程仓库的服务器。</li></ol><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><ol><li><p>按照以下步骤重新添加ssh密钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;****&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;****&quot;</span></span><br></pre></td></tr></table></figure><p>按动三次回车出现下列类似显示</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:CLLFyI7onqV2mDS9KRs3vKM1DgdUEyCYhwLM257sH1g 29****39@qq.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">|B+.+.            |</span></span><br><span class="line"><span class="string">|*+oo.            |</span></span><br><span class="line"><span class="string">|.o* +            |</span></span><br><span class="line"><span class="string">|o+ = . .         |</span></span><br><span class="line"><span class="string">|o.* .E. S        |</span></span><br><span class="line"><span class="string">|.oo=o            |</span></span><br><span class="line"><span class="string">|.+=Xo.           |</span></span><br><span class="line"><span class="string">|.=@*+ .          |</span></span><br><span class="line"><span class="string">|.*=oo.           |</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">————————————————</span></span><br></pre></td></tr></table></figure><p>生成一对密钥和公钥，id_rsa 和 id_rsa.pub，其中 id_rsa 为私钥，id_rsa.pub 为公钥，复制公钥上传至github上重新认证无效。</p></li><li><p>检查网络连接，使用surge的网络增强模式访问远程仓库，成功。</p></li></ol><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;在运行”hexo clean +hexo generate +hexo serve”命令后，出现ERROR输出一堆地址报错。</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/17/64b419ca16e4a.png" alt=""></p><h3 id="查找问题-1"><a href="#查找问题-1" class="headerlink" title="查找问题"></a>查找问题</h3><p>&ensp;&ensp;&ensp;&ensp;由于报错的文件路径我从未打开过并且代码正确，我从以下几个方面进行查找：</p><ol><li>插件冲突：在Hexo中使用了多个插件，可能会发生插件之间的冲突或不兼容性。尝试禁用一些插件，然后逐个启用它们，以确定哪个插件引起了问题。</li><li>环境配置问题：是否安装了正确版本的Node.js和Hexo，并且环境配置正确。检查Node.js版本是否与Hexo兼容，并确保已正确安装Hexo的依赖包。</li></ol><h2 id="解决措施-1"><a href="#解决措施-1" class="headerlink" title="解决措施"></a>解决措施</h2><p>&ensp;&ensp;&ensp;&ensp;在经过配置文件代码的阅读，我注意到在我的博客配置文件中，有一些插件的启用选项被设置为”enable: true”，然而，在实际安装的插件列表中，并没有找到对应的插件安装记录。这导致在运行三件套命令时出现了一系列的错误输出。</p><p>按照以下步骤操作：</p><ol><li>检查插件列表：运行命令”hexo list”，查看已安装的插件列表。</li><li>查找缺失的插件：在输出的列表中查找与配置文件中启用但未安装的插件对应的条目。</li><li>安装缺失的插件：使用命令”npm install 插件名称 —save”，安装缺失的插件。确保在命令中替换”插件名称”为实际插件的名称。</li><li>验证安装：运行命令”hexo clean + hexo generate + hexo serve”，检查是否仍然存在插件缺失的错误输出。如果没有出现错误，则表示插件安装成功。</li><li>配置文件检查：在修改配置文件时，请确保只启用已正确安装的插件，并仔细检查每个插件的安装状态。</li></ol><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>&ensp;&ensp;&ensp;&ensp;hexo安装音乐、追番页、live2d看板娘安装这里在hexo g的时候出现了以下报错:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError: Cannot <span class="built_in">read</span> properties of undefined (reading <span class="string">&#x27;count&#x27;</span>)</span><br><span class="line">    at module.exports (C:\Users\Chen\OneDrive\Digital Garden\node_modules\hexo-baidu-url-submit\lib\generator.js:4:41)</span><br></pre></td></tr></table></figure><h3 id="查找问题-2"><a href="#查找问题-2" class="headerlink" title="查找问题"></a>查找问题</h3><p>&ensp;&ensp;&ensp;&ensp;该报错与”hexo-baidu-url-submit”插件相关。该插件用于将博客链接自动推送给百度搜索引擎。部署器未找到该插件。</p><h3 id="解决措施-2"><a href="#解决措施-2" class="headerlink" title="解决措施"></a>解决措施</h3><p>&ensp;&ensp;&ensp;解决该问题的方法是卸载”hexo-baidu-url-submit”插件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm remove hexo-baidu-url-submit</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;卸载后，再次运行”hexo g”命令，不会再出现报错。可以继续安装音乐、追番页和live2d看板娘功能了。</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>&ensp;&ensp;&ensp;&ensp;遇到乱码报错时，我学到了排除错误的一些常见方法。</p><ul><li><p>首先，确保字符编码设置正确，这是解决乱码问题的第一步。</p></li><li><p>其次，检查文件是否损坏，并尝试删除缓存文件来清除可能的问题。</p></li><li><p>另外，保持Hexo和插件的版本更新也很重要，以确保兼容性。</p></li><li><p>如果问题仍然存在，重新初始化Hexo项目可能是最后的解决办法。</p><p>这个经验教训让我更加注重格式正确，终端和项目文件的完整性，并且需要记录每一步的操作过程，以避免类似的问题。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一上海之旅✈️</title>
      <link href="/posts/5149739a.html"/>
      <url>/posts/5149739a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="五一上海之旅"><a href="#五一上海之旅" class="headerlink" title="五一上海之旅"></a>五一上海之旅</h1><h2 id="我❤️上海～"><a href="#我❤️上海～" class="headerlink" title="我❤️上海～"></a>我❤️上海～</h2><p>时间仓促！可惜没去上海的大学看看😭特别是华师大</p><h2 id="【关于交通】"><a href="#【关于交通】" class="headerlink" title="【关于交通】"></a>【关于交通】</h2><h3 id="🔹杭州东站出发上海虹桥站～"><a href="#🔹杭州东站出发上海虹桥站～" class="headerlink" title="🔹杭州东站出发上海虹桥站～"></a>🔹杭州东站出发上海虹桥站～</h3><h3 id="🔹市内交通："><a href="#🔹市内交通：" class="headerlink" title="🔹市内交通："></a>🔹市内交通：</h3><p>可以坐公交🚌、地铁🚇、出租，地铁特别不人性化（指示灯非常难看，外地人太不友好啦</p><h2 id="【必打卡景点】"><a href="#【必打卡景点】" class="headerlink" title="【必打卡景点】"></a>【必打卡景点】</h2><h3 id="🔸外滩："><a href="#🔸外滩：" class="headerlink" title="🔸外滩："></a>🔸外滩：</h3><p>在外滩可以感受到大上海的繁华，南京路的高楼足以让我们停驻于此，还有和平饭店，在外滩看东方明珠真的美，真的繁华🌸</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee5fdad153.jpeg" alt="在这里插入图片描述"></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee710a5f99.jpeg" alt="在这里插入图片描述"></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee6ada0837.jpeg" alt="在这里插入图片描述"></p><h3 id="🔸田子坊："><a href="#🔸田子坊：" class="headerlink" title="🔸田子坊："></a>🔸田子坊：</h3><p>像北京798，田子坊有很多的设计室、画家工作室等其实一般，比较商业化。</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee855266fc.jpeg" alt=""></p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee6fa02bc9.jpeg" alt="在这里插入图片描述"></p><h3 id="🔸上海博物馆："><a href="#🔸上海博物馆：" class="headerlink" title="🔸上海博物馆："></a>🔸上海博物馆：</h3><p>去一座城市一定要去趟博物馆，去感受这座城市的历史与风貌，上海博物馆还是值得去看</p><h3 id="🔸黄浦江夜游："><a href="#🔸黄浦江夜游：" class="headerlink" title="🔸黄浦江夜游："></a>🔸黄浦江夜游：</h3><p>比较推荐，提前预定的，江风吹拂，两岸繁华的景象，太美了🌉</p><h2 id="【关于美食】"><a href="#【关于美食】" class="headerlink" title="【关于美食】"></a>【关于美食】</h2><h3 id="▪️蟹黄面、蟹黄饭："><a href="#▪️蟹黄面、蟹黄饭：" class="headerlink" title="▪️蟹黄面、蟹黄饭："></a>▪️蟹黄面、蟹黄饭：</h3><p>强烈推荐，超好吃，配上熏鱼，可以炫几碗🍜</p><h3 id="▪️上海生煎："><a href="#▪️上海生煎：" class="headerlink" title="▪️上海生煎："></a>▪️上海生煎：</h3><p>外皮金黄，有芝麻，很香，肉馅很嫩，味道还可以</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee8551b135.jpeg" alt=""></p><h3 id="▪️蝴蝶酥！"><a href="#▪️蝴蝶酥！" class="headerlink" title="▪️蝴蝶酥！"></a>▪️蝴蝶酥！</h3><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64aee8551aeda.jpeg" alt=""></p><h2 id="【关于住宿】"><a href="#【关于住宿】" class="headerlink" title="【关于住宿】"></a>【关于住宿】</h2><p>🏠住在了延安路附近，如果是背包客也可以选择南京路附近的青旅，上海交通很方便.</p><p>我爱上海～                     </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客寒假算法基础集训营（六）全部题解</title>
      <link href="/posts/c7be28a4.html"/>
      <url>/posts/c7be28a4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="A-回文大师-哈希二分-kmp-【补】"><a href="#A-回文大师-哈希二分-kmp-【补】" class="headerlink" title="A    回文大师 哈希二分/kmp 【补】"></a>A    回文大师 哈希二分/kmp 【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/A">题目链接</a></strong></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>翻译过来就是<br>求每一个前缀串 在原串的反串中有多少个相同的子串</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>可以构造一个反串<br>枚举反串开始的位置 再二分去找最长的和原前缀匹配（哈希O1判断）的在原串的位置，这个位置之前的所有前缀 的ans都+1，最后答案用差分维护<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> qwq=<span class="number">23333</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> haa[N],hbb[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hbb[b]-hbb[a<span class="number">-1</span>]*p[b-a+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*qwq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        haa[i]=haa[i<span class="number">-1</span>]*qwq+a[i];</span><br><span class="line">        hbb[n-i+<span class="number">1</span>]=hbb[n-i+<span class="number">1</span>+<span class="number">1</span>]*qwq+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; </span><br><span class="line">        hbb[i]=hbb[i<span class="number">-1</span>]*qwq+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>,r=n-i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get</span>(i, i+mid<span class="number">-1</span>)==haa[mid]) &#123;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[<span class="number">1</span>]++;</span><br><span class="line">        ans[l]--;<span class="comment">//求出来的是l==mid+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        ans[i]+=ans[i<span class="number">-1</span>];</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="B-价值序列-计数"><a href="#B-价值序列-计数" class="headerlink" title="B    价值序列 计数"></a>B    价值序列 计数</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/B">题目链接</a></strong></p><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/803d68704df7458d99059c178b4d618e.png" alt="在这里插入图片描述"></p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>删除一个数，价值必定不增<br>上升的序列和下降的序列之间的数 是可取可不取的 每一个数对答案的贡献是 2^(sum)<br>而波峰的那个值和波谷至少保留一个不然答案会减少 对答案的贡献是（2^sum)-1<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> v, sum;</span><br><span class="line">&#125;b[N]; </span><br><span class="line"><span class="type">int</span> p[N],a[N];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll p)</span></span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125; </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">            b[i].sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        b[++cnt].v=a[<span class="number">1</span>];b[cnt].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>]) b[++cnt].v=a[i]; </span><br><span class="line">            b[cnt].sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==cnt||i==<span class="number">1</span>)ans=(ans%M*(<span class="built_in">ksm</span>(<span class="number">2</span>, b[cnt].sum)<span class="number">-1</span>+M)%M)%M; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (b[i<span class="number">-1</span>].v&lt;b[i].v&amp;&amp;b[i].v&lt;b[i+<span class="number">1</span>].v||b[i<span class="number">-1</span>].v&gt;b[i].v&amp;&amp;b[i].v&gt;b[i+<span class="number">1</span>].v) &#123;</span><br><span class="line">                ans=(ans%M*(<span class="built_in">ksm</span>(<span class="number">2</span>, b[i].sum)+M)%M)%M; </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ans=(ans%M*(<span class="built_in">ksm</span>(<span class="number">2</span>, b[i].sum)<span class="number">-1</span>+M)%M)%M; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans%=M; </span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="C-数组划分-栈-并查集-【补】"><a href="#C-数组划分-栈-并查集-【补】" class="headerlink" title="C    数组划分 栈/并查集 【补】"></a>C    数组划分 栈/并查集 【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/C">题目链接</a></strong></p><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/500e1b81e48a487a870f6b0f620dbaf9.png" alt="在这里插入图片描述"><br>求某个区间的有几个子数组的每个前缀和都大于等于0 且划分的数组尽量少</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>从每个位置（记为l），出发去找第一个 $sum[r]-sum[l-1]<0$ 的 r 位置，题目里 r 是不包含的，这个 $[l, r)$ 就是最大的满足所有前缀和都大于等于 $0$ 的划分区间就是对于每个 $l$ 去找第一个 $sum[r]<sum[l-1]$ 的 r前缀和sum=5 1 3 8 7 6一开始 6i=6时 6 7i=5时 6 7 8 保留这些值是因为前面可能出现 7 也有可能出现 9，7的第一个最小的是6 而9的第一个小于的是8i=4时 3i=3时 1i=2时 1 5 所以我们用单调栈维护每个i对应的r，从右向左循环，若sumi<栈顶元素，那么栈顶元素不能成为左边的第一个小于就弹出，每i次栈内都是这个元素x划分的下一个位置 $fx$ 和 下一个位置 $f(fx)$ 和下一个位置 $f(f(fx))$，刚好是对 $i$ 来说到 $n$ 的划分的区间个数且是单调递减的 这样我们维护值改为维护下标 那么当枚举到题目要求查询的 $l$ 我们就可以二分去找 最后一个小于$r$的下标 $mid$ 答案就等于 $cnt-mid+1$  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> qwq=<span class="number">23333</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BufferSize=<span class="number">1</span>&lt;&lt;<span class="number">16</span>;</span><br><span class="line"><span class="type">char</span> buffer[BufferSize],*head,*tail;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">char</span> <span class="title function_">Getchar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==tail) &#123;</span><br><span class="line">        <span class="type">int</span> l=fread(buffer,<span class="number">1</span>,BufferSize,<span class="built_in">stdin</span>);</span><br><span class="line">        tail=(head=buffer)+l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=Getchar();</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=Getchar()) <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=Getchar()) x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>) print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>|<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t=read();</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n, q;</span><br><span class="line">        n=read();</span><br><span class="line">        q=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x=read();</span><br><span class="line">            sum[i]=sum[i<span class="number">-1</span>]+x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=q; i++) &#123;</span><br><span class="line">            l[i]=read();</span><br><span class="line">            r[i]=read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m=q;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>; </span><br><span class="line">        st[++cnt]=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(cnt&amp;&amp;sum[st[cnt]]&gt;=sum[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            st[++cnt]=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(m&amp;&amp;l[m]==i) &#123;</span><br><span class="line">                <span class="type">int</span> ll=<span class="number">1</span>, rr=cnt;</span><br><span class="line">                <span class="keyword">while</span>(ll&lt;rr)&#123;</span><br><span class="line">                    <span class="type">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(st[mid]&lt;r[m])rr=mid;</span><br><span class="line">                    <span class="keyword">else</span> ll=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[m]=cnt-(ll)+<span class="number">1</span>;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=q; i++) &#123;</span><br><span class="line">            print(ans[i]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="D-删除子序列-计数"><a href="#D-删除子序列-计数" class="headerlink" title="D    删除子序列 计数"></a>D    删除子序列 计数</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/D">题目链接</a></strong></p><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/9a32495f4a0b435199cb212db9e6b30c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXVpbm4xOA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>因为T字符串没重复的字符 那么从后往前循环找 这个字符的后一个字母有没有<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N],sum[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">string</span> t; </span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">26</span>; i++) sum[i]=<span class="number">0</span>; </span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="type">char</span>, <span class="type">char</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;m<span class="number">-1</span>; i++) mp[t[i]]=t[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==t[m<span class="number">-1</span>]) &#123;</span><br><span class="line">                sum[s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">                 <span class="keyword">if</span>(sum[mp[s[i]]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]) &#123;</span><br><span class="line">                    sum[mp[s[i]]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]--;</span><br><span class="line">                    sum[s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]++;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum[t[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="E-骑士-贪心"><a href="#E-骑士-贪心" class="headerlink" title="E    骑士 贪心"></a>E    骑士 贪心</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/E">题目链接</a></strong></p><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>找最大值<br>对于最大的那个人只要能打过第二大的<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], h[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">            <span class="type">int</span> maxx=<span class="number">0</span>, p=<span class="number">0</span>, ma2=<span class="number">0</span>, p2=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ;i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;h[i]; </span><br><span class="line">                <span class="keyword">if</span>(maxx&lt;=a[i]) maxx=max(maxx,a[i]),p=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ;i&lt;=n; i++) &#123; </span><br><span class="line">                <span class="keyword">if</span>(ma2&lt;=a[i]&amp;&amp;p!=i) ma2=max(ma2,a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=p) ans+=max(<span class="number">0ll</span>, maxx-b[i]-h[i]+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> ans+=max(<span class="number">0ll</span>, ma2-b[i]-h[i]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="F-串-分类讨论"><a href="#F-串-分类讨论" class="headerlink" title="F    +-串 分类讨论"></a>F    +-串 分类讨论</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/F">题目链接</a></strong></p><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>一串+-的式子，+是+1，-是-1，可以改变符号k次使得算是绝对值最小</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p><img src="https://img-blog.csdnimg.cn/da47e046c3504efbaa7fee7025fc199b.png" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> k;<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="type">int</span> m=s.size();</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;+&#x27;</span>) a++; </span><br><span class="line">            <span class="keyword">else</span> a--;</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="built_in">abs</span>(a); </span><br><span class="line">        <span class="keyword">if</span>(k&lt;=a/<span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;a-k*<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//a=6 k=1 ans=4</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            k-=a/<span class="number">2</span>;</span><br><span class="line">            a%=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a) <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="G-迷宫2-思维-最短路-【补】"><a href="#G-迷宫2-思维-最短路-【补】" class="headerlink" title="G    迷宫2 思维+最短路 【补】"></a>G    迷宫2 思维+最短路 【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/G">题目链接</a></strong></p><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/dba198a67c9d4073b74758c176de6fde.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXVpbm4xOA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h2><p>随便你改一定有一条从$(1,1)$到$(n,m)$的路，对于每个点修改就要代价就为1 不修改代价就为0<br>于是问题变为找$(1,1)$到$(n,m)$的最短路径，对于点$(x,y)$，如果 $Cxy==L$，则 $(x,y)$ 到 $(x,y-1)$的花费为 $0$，到其它三个方向的花费为 $1$。</p><p>看错范围n，m&lt;=1000，拿map当二维数组然后t死了<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1005</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">string</span> maze[N];</span><br><span class="line"><span class="type">bool</span> is[N][N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">in</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>&lt;=x&amp;&amp;x&lt;=n&amp;&amp;<span class="number">1</span>&lt;=y&amp;&amp;y&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> x, y, d;</span><br><span class="line">    <span class="type">bool</span> operator &lt;(<span class="type">const</span> node&amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d&gt;rhs.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node1</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> dis[N][N];</span><br><span class="line">node1 pre[N][N];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dij</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">            dis[i][j]=<span class="number">1e18</span>, is[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.push(&#123;<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        node now=q.top();</span><br><span class="line">        q.pop(); </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x=now.x+dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> y=now.y+dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(in(x, y)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[now.x][now.y]==<span class="string">&#x27;U&#x27;</span>&amp;&amp;i==<span class="number">1</span>||maze[now.x][now.y]==<span class="string">&#x27;D&#x27;</span>&amp;&amp;i==<span class="number">0</span>||maze[now.x][now.y]==<span class="string">&#x27;L&#x27;</span>&amp;&amp;i==<span class="number">3</span>||maze[now.x][now.y]==<span class="string">&#x27;R&#x27;</span>&amp;&amp;i==<span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dis[x][y]&gt;now.d) &#123;</span><br><span class="line">                        dis[x][y]=now.d;</span><br><span class="line">                        pre[x][y]=&#123;now.x, now.y&#125;;</span><br><span class="line">                        q.push(&#123;x,y,now.d&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dis[x][y]&gt;now.d+<span class="number">1</span>) &#123;</span><br><span class="line">                        pre[x][y]=&#123;now.x, now.y&#125;;</span><br><span class="line">                        dis[x][y]=now.d+<span class="number">1</span>;</span><br><span class="line">                        q.push(&#123;x,y,now.d+<span class="number">1</span>&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[n][m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;maze[i];</span><br><span class="line">            maze[i]=<span class="string">&#x27;.&#x27;</span>+maze[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==m&amp;&amp;n==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dij()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x=pre[n][m].x;</span><br><span class="line">            <span class="type">int</span> y=pre[n][m].y;</span><br><span class="line">            <span class="keyword">if</span>((n-x)==<span class="number">1</span>&amp;&amp;(m-y)==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[x][y]!=<span class="string">&#x27;D&#x27;</span>) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;D&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((n-x)==<span class="number">-1</span>&amp;&amp;(m-y)==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[x][y]!=<span class="string">&#x27;U&#x27;</span>) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;U&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((n-x)==<span class="number">0</span>&amp;&amp;(m-y)==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[x][y]!=<span class="string">&#x27;L&#x27;</span>) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;L&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((n-x)==<span class="number">0</span>&amp;&amp;(m-y)==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maze[x][y]!=<span class="string">&#x27;R&#x27;</span>)  <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;R&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n=x, m=y;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>&amp;&amp;y==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="H-寒冬信使2-博弈【补】"><a href="#H-寒冬信使2-博弈【补】" class="headerlink" title="H    寒冬信使2 博弈【补】"></a>H    寒冬信使2 博弈【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/H">题目链接</a></strong></p><h2 id="题意：-7"><a href="#题意：-7" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/0baebda66f6d4862a09b8595ec86d57a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXVpbm4xOA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h2><p>n很小<br>所以所有状态可以状态压缩存起来<br>当前状态如果在一次操作后变成了一个必败态，那么当前状态就是先手必胜<br>假如一个状态经过一次操作怎么都让对手赢那么当前状态就是先手必败<br>必败态是全黑 必胜态是两个白色或者第一个是白色</p><p>所以你每个状态只要找到他之前的状态里有一个必败 那么你这个状态就是必胜<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">8e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">14</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">12</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((i&amp;<span class="number">1</span>)&amp;&amp;!dp[i^<span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">11</span>&amp;&amp;!dp[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j)&gt;i) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>((i&amp;(<span class="number">1</span>&lt;&lt;j))==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;j; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[(i^(<span class="number">1</span>&lt;&lt;j))^(<span class="number">1</span>&lt;&lt;k)]==<span class="number">0</span>) &#123;</span><br><span class="line">                        dp[i]=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(s[i]==<span class="string">&#x27;w&#x27;</span>) p+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;p&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(dp[p]) cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="I-A-B问题-进制模拟"><a href="#I-A-B问题-进制模拟" class="headerlink" title="I    A+B问题 进制模拟"></a>I    A+B问题 进制模拟</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/I">题目链接</a></strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function">string <span class="title">sum</span><span class="params">(string str1, string str2)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = str1.<span class="built_in">size</span>() - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i, ++j) a[j] = str1[i] - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = str2.<span class="built_in">size</span>() - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i, ++j) b[j] = str2[i] - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        b[i] += a[i];</span><br><span class="line">        <span class="keyword">if</span>(b[i] &gt;= n) &#123;</span><br><span class="line">            b[i + <span class="number">1</span>] += b[i] / n;</span><br><span class="line">            b[i] %= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b[p] == <span class="number">0</span> &amp;&amp; p &gt; <span class="number">0</span>) p--;</span><br><span class="line">    string t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = p; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i] &gt;= <span class="number">10</span>) t += <span class="string">&#x27;A&#x27;</span> + (b[i] - <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span> t += b[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;cin&gt;&gt;k;</span><br><span class="line">    n=k;</span><br><span class="line">    string a, b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sum</span>(a, b)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-牛妹的数学难题-数学"><a href="#J-牛妹的数学难题-数学" class="headerlink" title="J 牛妹的数学难题 数学"></a>J 牛妹的数学难题 数学</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23481/J">题目链接</a></strong></p><h2 id="题意：-8"><a href="#题意：-8" class="headerlink" title="题意："></a>题意：</h2><p>题目骗你的<br>不过有个题<a href="https://codeforces.com/contest/1637/problem/D呜呜呜昨天考今天用">https://codeforces.com/contest/1637/problem/D呜呜呜昨天考今天用</a></p><h2 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h2><p>看到ai的范围<br>题目式子是每次选 k 个数字<br><img src="https://img-blog.csdnimg.cn/4fdd224c11c34894b445f98133a98f51.png" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>; </span><br><span class="line"><span class="type">int</span> p[N], d[N];</span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line">ll <span class="title function_">C</span><span class="params">(ll n, ll m)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p[n]%M*ksm(p[n-m]%M*p[m]%M, M<span class="number">-2</span>)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++) p[i]=p[i<span class="number">-1</span>]*i%M;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++) d[i]=d[i<span class="number">-1</span>]*<span class="number">2</span>%M;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>, y=<span class="number">0</span>, xx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;xx;</span><br><span class="line">        <span class="keyword">if</span>(xx==<span class="number">1</span>) x++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(xx==<span class="number">2</span>) y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">    ans=(ans%M+C(x,i)*d[i]%M*C(y,k-i)%M)%M;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客寒假算法基础集训营（五）全部题解</title>
      <link href="/posts/fbff4d2a.html"/>
      <url>/posts/fbff4d2a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="A-疫苗小孩-二分"><a href="#A-疫苗小孩-二分" class="headerlink" title="A    疫苗小孩 二分"></a>A    疫苗小孩 二分</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/A">题目链接</a></strong></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     string s;</span><br><span class="line">     cin&gt;&gt;s;s=<span class="string">&#x27;.&#x27;</span>+s;</span><br><span class="line">     <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>) pos[++cnt]=i;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> k, w, q;</span><br><span class="line">     cin&gt;&gt;k&gt;&gt;w&gt;&gt;q;</span><br><span class="line">     <span class="type">int</span> ans=<span class="number">0</span>; </span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) &#123; </span><br><span class="line">        <span class="type">int</span> p1=<span class="built_in">lower_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[i]+k)-pos;</span><br><span class="line">        <span class="type">int</span> p11=<span class="built_in">lower_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[p1]+k)-pos;</span><br><span class="line">        <span class="type">int</span> p12=<span class="built_in">upper_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[p1]+k)-pos<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> p2=<span class="built_in">upper_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[i]+k)-pos<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> p21=<span class="built_in">lower_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[p2]+k)-pos;</span><br><span class="line">        <span class="type">int</span> p22=<span class="built_in">upper_bound</span>(pos+<span class="number">1</span>, pos+<span class="number">1</span>+cnt, pos[p2]+k)-pos<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        p1=pos[p1];p2=pos[p2];p11=pos[p11];p12=pos[p12];p21=pos[p21];p22=pos[p22];</span><br><span class="line">        <span class="type">int</span> j=i;</span><br><span class="line">        i=pos[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;p1&amp;&amp;p1&lt;=n) &#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p1-i))*q);</span><br><span class="line">            <span class="keyword">if</span>(p1&lt;p11&amp;&amp;p1&lt;=n) ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p1-i))*q+w-<span class="built_in">abs</span>(k-(p11-p1))*q);</span><br><span class="line">            <span class="keyword">if</span>(p1&lt;p12&amp;&amp;p1&lt;=n) ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p1-i))*q+w-<span class="built_in">abs</span>(k-(p12-p1))*q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;p2&amp;&amp;p2&lt;=n) &#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p2-i))*q);</span><br><span class="line">            <span class="keyword">if</span>(p2&lt;p21&amp;&amp;p21&lt;=n) ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p2-i))*q+w-<span class="built_in">abs</span>(k-(p21-p2))*q);</span><br><span class="line">            <span class="keyword">if</span>(p2&lt;p22&amp;&amp;p22&lt;=n) ans=<span class="built_in">max</span>(ans, w-<span class="built_in">abs</span>(k-(p2-i))*q+w-<span class="built_in">abs</span>(k-(p22-p2))*q);</span><br><span class="line">        &#125;</span><br><span class="line">        i=j;</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-乒乓小孩-构造【待补】"><a href="#B-乒乓小孩-构造【待补】" class="headerlink" title="B    乒乓小孩  构造【待补】"></a>B    乒乓小孩  构造【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/B">题目链接</a></strong></p><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"># C战棋小孩 二进制枚举+贪心</span><br><span class="line">**[题目链接](https:<span class="comment">//ac.nowcoder.com/acm/contest/23480/C)**</span></span><br><span class="line">##题意：</span><br><span class="line"></span><br><span class="line">##题解： </span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"><span class="keyword">struct</span> node &#123;</span><br><span class="line">    <span class="type">int</span> val, m;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">signed</span> <span class="built_in">main</span>() &#123;</span><br><span class="line">    <span class="type">int</span> n, k, s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)  cin&gt;&gt;p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x,y,c,d;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;c&gt;&gt;d; </span><br><span class="line">        a[i].val=<span class="built_in">max</span>(x, y);</span><br><span class="line">        a[i].m=<span class="built_in">max</span>(<span class="built_in">max</span>(x, y), <span class="built_in">max</span>(c, d));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(<span class="number">1</span>&lt;&lt;n); i++) &#123; </span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) b[j]=a[j].m, cnt++; </span><br><span class="line">            <span class="keyword">else</span> b[j]=a[j].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;k) <span class="keyword">continue</span>; </span><br><span class="line">        <span class="built_in">sort</span>(b, b+n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="type">int</span> sum=s, maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">            sum+=b[j];</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=p[j]) maxx++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">max</span>(maxx, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-数位小孩-dfs"><a href="#D-数位小孩-dfs" class="headerlink" title="D    数位小孩 dfs"></a>D    数位小孩 dfs</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/D">题目链接</a></strong></p><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> sum, <span class="type">int</span> f, <span class="type">int</span> up)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sum&lt;=up) &#123;</span><br><span class="line">        <span class="keyword">if</span>(f)ans++;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[x+i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>)  dfs(i, sum*<span class="number">10</span>+i, <span class="number">1</span>, up);</span><br><span class="line">        <span class="keyword">else</span> dfs(i, sum*<span class="number">10</span>+i, f, up);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">18</span>; i++) &#123;</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;i; j++) <span class="keyword">if</span>(i%j==<span class="number">0</span>) vis[i]=<span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) dfs(i, i, i==<span class="number">1</span>, r);</span><br><span class="line">    r=ans, ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) dfs(i, i, i==<span class="number">1</span>, l<span class="number">-1</span>);</span><br><span class="line">    l=ans;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;r-l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="E-复苏小孩-线段树【补】"><a href="#E-复苏小孩-线段树【补】" class="headerlink" title="E    复苏小孩 线段树【补】"></a>E    复苏小孩 线段树【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/E">题目链接</a></strong></p><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>; p%=(M<span class="number">-1</span>);<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">5</span>][N*<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">5</span>][N];</span><br><span class="line"><span class="type">int</span> val[N];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dd = ksm(<span class="number">2</span>, M<span class="number">-2</span>);</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushup1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> jin)</span> &#123;</span><br><span class="line">    sum[jin][id] = (sum[jin][id &lt;&lt; <span class="number">1</span>]+sum[jin][id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+M)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">build1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> jin)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[jin][id] = b[jin][l]%M;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build1(id &lt;&lt; <span class="number">1</span>, l, mid, jin);</span><br><span class="line">    build1(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, jin);</span><br><span class="line">    pushup1(id, jin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">update1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v, <span class="type">int</span> jin)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[jin][id] += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        update1(id &lt;&lt; <span class="number">1</span>, l, mid, x, v, jin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update1(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v, jin);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup1(id, jin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">query1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> jin)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[jin][id]%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) &#123;</span><br><span class="line">        ans=(ans%M+query1(id&lt;&lt;<span class="number">1</span>, l, mid, x, y,jin)%M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) &#123;</span><br><span class="line">        ans=(ans%M+query1(id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, x, y,jin)%M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    ans%=M;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">val[n+<span class="number">1</span>]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">val[i]=val[i+<span class="number">1</span>]*dd%M;</span><br><span class="line">b[s[i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>][i]=val[i];</span><br><span class="line">        update1(<span class="number">1</span>,<span class="number">1</span>,n, i, val[i], s[i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="type">int</span> op, x, y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>) &#123;</span><br><span class="line">update1(<span class="number">1</span>,<span class="number">1</span>,n, x, M-val[x], s[x<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">update1(<span class="number">1</span>,<span class="number">1</span>,n, x, val[x], y);</span><br><span class="line">s[x<span class="number">-1</span>]=y+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> ans1, ans2, ans3;</span><br><span class="line">ans1=ksm(dd, y-x+<span class="number">1</span>)+((query1(<span class="number">1</span>,<span class="number">1</span>,n,x,y,<span class="number">1</span>)+M)%M)*ksm(<span class="number">2</span>, n-y);</span><br><span class="line">ans2=ksm(dd, y-x+<span class="number">1</span>)+((query1(<span class="number">1</span>,<span class="number">1</span>,n,x,y,<span class="number">2</span>)+M)%M)*ksm(<span class="number">2</span>, n-y);</span><br><span class="line">ans3=ksm(dd, y-x+<span class="number">1</span>)+((query1(<span class="number">1</span>,<span class="number">1</span>,n,x,y,<span class="number">3</span>)+M)%M)*ksm(<span class="number">2</span>, n-y);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans1%M&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; ans2%M&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt; ans3%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-飞车小孩-数学【待补】"><a href="#F-飞车小孩-数学【待补】" class="headerlink" title="F    飞车小孩  数学【待补】"></a>F    飞车小孩  数学【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/F">题目链接</a></strong></p><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="G-163小孩-暴力"><a href="#G-163小孩-暴力" class="headerlink" title="G    163小孩 暴力"></a>G    163小孩 暴力</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/G">题目链接</a></strong></p><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>打表代码<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">100</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> f)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">6</span>) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x; i&lt;=<span class="number">13</span>; i++) &#123;      </span><br><span class="line">        <span class="keyword">if</span>(flag[i]&gt;=<span class="number">4</span>)<span class="keyword">continue</span>;</span><br><span class="line">        a[f+<span class="number">1</span>]=i;</span><br><span class="line">        flag[i]++;</span><br><span class="line">        dfs(i, f+<span class="number">1</span>);</span><br><span class="line">        flag[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">18395</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-一六三小孩-？【待补】"><a href="#H-一六三小孩-？【待补】" class="headerlink" title="H    一六三小孩  ？【待补】"></a>H    一六三小孩  ？【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/H">题目链接</a></strong></p><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"># I兔崽小孩 前缀和二分</span><br><span class="line">**[题目链接](https:<span class="comment">//ac.nowcoder.com/acm/contest/23480/I)**</span></span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> b[N], sum[N],t[N];</span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> <span class="built_in">read</span>() &#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>(); <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125; <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="built_in">main</span>() &#123; </span><br><span class="line">    n=<span class="built_in">read</span>();q=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        t[i]=<span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        b[i<span class="number">-1</span>]=t[i]-t[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>, b+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line">        sum[i]=sum[i<span class="number">-1</span>]+b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        x=<span class="built_in">read</span>();y=<span class="built_in">read</span>();</span><br><span class="line">        <span class="type">int</span> p=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>, b+n, x)-b;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;sum[n-1]-sum[p-1]-x*(n-1-p+1)&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(sum[n<span class="number">-1</span>]-sum[p<span class="number">-1</span>]-x*(n<span class="number">-1</span>-p+<span class="number">1</span>)&gt;=y) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-三国小孩-签到"><a href="#J-三国小孩-签到" class="headerlink" title="J    三国小孩 签到"></a>J    三国小孩 签到</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/J">题目链接</a></strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">if</span>(n+m&gt;k) cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K-造梦小孩-分块【待补】"><a href="#K-造梦小孩-分块【待补】" class="headerlink" title="K    造梦小孩  分块【待补】"></a>K    造梦小孩  分块【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23480/K">题目链接</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >  Qwq</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客寒假算法基础集训营（四）全部题解</title>
      <link href="/posts/33426548.html"/>
      <url>/posts/33426548.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="A-R-模拟"><a href="#A-R-模拟" class="headerlink" title="A    R 模拟"></a>A    R 模拟</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/A">题目链接</a></strong></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给一个包含只包含大写字母的字符串，找有多少个子串包含  k  个  R  字符且不包含  P  字符</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>不包括  P  就分段来计算<br>至少包含  k  个  R<br>贡献就等于这个位置 第前 k 个  R  位置</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N], p[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k; cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    string s; cin&gt;&gt;s;</span><br><span class="line">    s=s+<span class="string">&quot;P&quot;</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;P&#x27;</span>) a[++cnt]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=cnt; j++) &#123; </span><br><span class="line"><span class="type">int</span> cntt=<span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=a[j<span class="number">-1</span>]+<span class="number">1</span>; i&lt;a[j]; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i]==<span class="string">&#x27;R&#x27;</span>) p[++cntt]=i+<span class="number">1</span>-a[j<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(cntt&gt;=k) ans+=p[cntt-k+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-进制-线段树"><a href="#B-进制-线段树" class="headerlink" title="B    进制 线段树"></a>B    进制 线段树</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/B">题目链接</a></strong></p><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>所能表示的某进制的最小值的某进制就是该串里的最大的数字+1,不然那个数不可能出现<br>题目要求单点修改和区间查询<br>那就是最简单的求最大值和求和的线段树板子<br>求和的线段树是存了2-10进制棵每一位的数字 <em> 该位权值<br>比如10进制树 123存的是1 </em> 10 <em> 10        ———-          2</em>10 ———-3<br>求和出来还要除与多的权值 取[1,2] ，答案等于120/10</p><p>这个求和的bug真的找了一万年呜呜呜</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[<span class="number">13</span>][N];</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="type">int</span> p[<span class="number">13</span>][N];</span><br><span class="line"><span class="type">int</span> maxx[<span class="number">4</span>*N];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">13</span>][<span class="number">4</span>*N];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll p)</span></span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    maxx[id] = <span class="built_in">max</span>(maxx[id &lt;&lt; <span class="number">1</span>], maxx[id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        maxx[id] = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        maxx[id] = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span>, l, mid, x, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> maxx[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) &#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans, <span class="built_in">query</span>(id&lt;&lt;<span class="number">1</span>, l, mid, x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) &#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans, <span class="built_in">query</span>(id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> jin)</span> </span>&#123;</span><br><span class="line">    sum[jin][id] = (sum[jin][id &lt;&lt; <span class="number">1</span>]+sum[jin][id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>])%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> jin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[jin][id] = b[jin][l]%M;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build1</span>(id &lt;&lt; <span class="number">1</span>, l, mid, jin);</span><br><span class="line">    <span class="built_in">build1</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, jin);</span><br><span class="line">    <span class="built_in">pushup1</span>(id, jin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> v, <span class="type">int</span> jin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[jin][id] = v%M;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">update1</span>(id &lt;&lt; <span class="number">1</span>, l, mid, x, v,jin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">update1</span>(id &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v,jin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup1</span>(id, jin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y,<span class="type">int</span> jin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[jin][id]%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) &#123;</span><br><span class="line">        ans=ans%M+<span class="built_in">query1</span>(id&lt;&lt;<span class="number">1</span>, l, mid, x, y,jin)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) &#123;</span><br><span class="line">        ans=ans%M+<span class="built_in">query1</span>(id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, x, y,jin)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    ans%=M;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&#x27;.&#x27;</span>+s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">        a[i]=(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;=<span class="number">10</span>; j++) &#123;</span><br><span class="line">                b[j][i]=a[i]*<span class="built_in">ksm</span>(j, n-i)%M;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;b[j][i]&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">10</span>; i++) <span class="built_in">build1</span>(<span class="number">1</span>, <span class="number">1</span>, n, i);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;   &quot;&lt;&lt;query1(1,1,n,1 ,3, 10)&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">10</span>; i++) <span class="built_in">update1</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y*<span class="built_in">ksm</span>(i, n-x), i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> dang=<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">            <span class="keyword">if</span>(dang==<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dang++;</span><br><span class="line">                cout&lt;&lt;<span class="built_in">query1</span>(<span class="number">1</span>,<span class="number">1</span>,n,x, y,dang)%<span class="function">M*<span class="title">ksm</span><span class="params">(ksm(dang, n-y), M<span class="number">-2</span>)</span>%M&lt;&lt;endl</span>;<span class="comment">//逆元</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-蓝彗星-前缀和"><a href="#C-蓝彗星-前缀和" class="headerlink" title="C    蓝彗星 前缀和"></a>C    蓝彗星 前缀和</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/C">题目链接</a></strong></p><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>前缀和求覆盖次数<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;t;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&#x27;.&#x27;</span>+s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x; <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>) b[x]++, b[x+t]--;<span class="comment">//x和x+t-1+1</span></span><br><span class="line">        <span class="keyword">else</span> c[x]++, c[x+t]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">        c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;b[i]&lt;&lt;&quot; &quot;&lt;&lt;c[i]&lt;&lt;endl;输出就可以看到这个时间 彗星亮了没</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]&amp;&amp;!c[i]) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="D-雪色光晕-计算几何"><a href="#D-雪色光晕-计算几何" class="headerlink" title="D    雪色光晕 计算几何"></a>D    雪色光晕 计算几何</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/D">题目链接</a></strong></p><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>求点到线段的最短距离板子<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">dis</span><span class="params">(<span class="type">double</span> xx, <span class="type">double</span> yy, <span class="type">double</span> x1, <span class="type">double</span> y2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((xx-x1)*(xx-x1)+(yy-y2)*(yy-y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">Pd</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> x1, <span class="type">double</span> y1, <span class="type">double</span> x2, <span class="type">double</span> y2)</span>&#123;</span><br><span class="line">    <span class="type">double</span> cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);</span><br><span class="line">    <span class="keyword">if</span> (cross &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - x1) * (x - x1) + (y - y1) * (y - y1));</span><br><span class="line">    <span class="type">double</span> d2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);</span><br><span class="line">    <span class="keyword">if</span> (cross &gt;= d2) <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - x2) * (x - x2) + (y - y2) * (y - y2));</span><br><span class="line">    <span class="type">double</span> r = cross / d2;</span><br><span class="line">    <span class="type">double</span> px = x1 + (x2 - x1) * r;</span><br><span class="line">    <span class="type">double</span> py = y1 + (y2 - y1) * r;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((x - px) * (x - px) + (py - y) * (py - y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="type">double</span> x0, y0, X, Y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x0&gt;&gt;y0&gt;&gt;X&gt;&gt;Y;</span><br><span class="line">    <span class="type">double</span> minn=dis(x0,y0,X,Y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        minn=min(minn, Pd(X, Y, x0,y0, x0+x, y0+y));</span><br><span class="line">        x0+=x;</span><br><span class="line">        y0+=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">8</span>)&lt;&lt;minn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="E-真假签到题-签到"><a href="#E-真假签到题-签到" class="headerlink" title="E    真假签到题 签到"></a>E    真假签到题 签到</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/E">题目链接</a></strong></p><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>那个函数就是求本身</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>要开longlong<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">int</span> x;</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="F-小红的记谱法-模拟"><a href="#F-小红的记谱法-模拟" class="headerlink" title="F    小红的记谱法 模拟"></a>F    小红的记谱法 模拟</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/F">题目链接</a></strong></p><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>模拟</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>模拟<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], c[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">string</span> pp=<span class="string">&quot;CDEFGAB&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;pp.size(); i++) mp[pp[i]]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> n=s.size();</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;<span class="comment">//呜呜在里面定义忘记赋值 找了好久bug</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;&lt;&#x27;</span>) p++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;&gt;&#x27;</span>) p--;</span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;mp[s[i]];</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=p; j++) <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=-p; j++) <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="G-子序列权值乘积-数学"><a href="#G-子序列权值乘积-数学" class="headerlink" title="G    子序列权值乘积 数学"></a>G    子序列权值乘积 数学</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/G">题目链接</a></strong></p><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><p>求这个数组的所有 非空子序列 的最大值*最小值的乘积是多少？<br>1e5</p><h2 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h2><p>先排序<br>若它作为一个字序列的最小值，后面的  n-i  个数随意，也就是有  2的n-i  次方 个机会作为最小值，同样的，有 2的 i-1 次方 个机会作为最小值，那这个数产生的贡献就是<br>幂次取模的话取 Mod-1 </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MM=<span class="number">1e9</span>+<span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res%M;&#125;</span><br><span class="line">ll <span class="title function_">ksmm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%MM;&#125;a=a*a%MM;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res%MM;&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n); </span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> b=ksmm(<span class="number">2</span>, i<span class="number">-1</span>)+ksmm(<span class="number">2</span>, n-i);</span><br><span class="line">        ans=ans%M*ksm(a[i], b)%M;</span><br><span class="line">        ans%=M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-真真真真真签到题-签到"><a href="#H-真真真真真签到题-签到" class="headerlink" title="H    真真真真真签到题 签到"></a>H    真真真真真签到题 签到</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/H">题目链接</a></strong></p><h2 id="题意：-7"><a href="#题意：-7" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h2><p>就是把距离当成体对角线来算体积<br>因为小紫肯定在正方体中间<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ihnt long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="type">double</span> x;</span><br><span class="line">   cin&gt;&gt;x;</span><br><span class="line">   cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">7</span>)&lt;&lt;x/<span class="built_in">sqrt</span>(<span class="number">3</span>)*<span class="number">2</span>*x/<span class="built_in">sqrt</span>(<span class="number">3</span>)*<span class="number">2</span>*x/<span class="built_in">sqrt</span>(<span class="number">3</span>)*<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="I-爆炸的符卡洋洋洒洒-背包dp"><a href="#I-爆炸的符卡洋洋洒洒-背包dp" class="headerlink" title="I    爆炸的符卡洋洋洒洒 背包dp"></a>I    爆炸的符卡洋洋洒洒 背包dp</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/I">题目链接</a></strong></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p> dp[i][j]  代表轮到第 i 张卡时候的质量% k==j 的最大值<br>转移方程<br> int p=(j-a[i]+k) %k<br> dp[j][i]=max(dp[j][i-1], dp[j][i]); 不取当前牌<br> dp[j][i]=max(dp[p][i-1]+b[i], dp[j][i]);  取当前牌<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">        a[i]%=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>（<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++）<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=k; j++) dp[i][j]=<span class="number">-1e18</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="type">int</span> p=(j-a[i]+k)%k;</span><br><span class="line">            dp[j][i]=<span class="built_in">max</span>(dp[j][i<span class="number">-1</span>], dp[j][i]); </span><br><span class="line">            dp[j][i]=<span class="built_in">max</span>(dp[p][i<span class="number">-1</span>]+b[i], dp[j][i]);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> maxx=dp[<span class="number">0</span>][n];</span><br><span class="line">    <span class="keyword">if</span>(maxx&lt;=<span class="number">0</span>) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;maxx&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="J-区间合数的最小公倍数-数学"><a href="#J-区间合数的最小公倍数-数学" class="headerlink" title="J    区间合数的最小公倍数 数学"></a>J    区间合数的最小公倍数 数学</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/J">题目链接</a></strong></p><h2 id="题意：-8"><a href="#题意：-8" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">bool</span> check[N],vis[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    check[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!check[i])p[++p[<span class="number">0</span>]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            t=i*p[j];</span><br><span class="line">            <span class="keyword">if</span>(t&gt;n)<span class="keyword">break</span>;</span><br><span class="line">            check[t]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="type">int</span> mp[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    n=<span class="number">30001</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="type">bool</span> q=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=l; i&lt;=r; i++) &#123;</span><br><span class="line">        <span class="type">int</span> num=i;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=p[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(num%p[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                num/=p[j];</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;=<span class="number">2</span>) q=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">continue</span>; </span><br><span class="line">        num=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=p[<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(num%p[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                num/=p[j];</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            mp[p[j]]=max(sum, mp[p[j]]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!q) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=p[<span class="number">0</span>]; i++) &#123; </span><br><span class="line">        ans=ans*ksm(p[i], mp[p[i]])%M;</span><br><span class="line">        ans%=M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K-小红的真真假假签到题题-签到"><a href="#K-小红的真真假假签到题题-签到" class="headerlink" title="K    小红的真真假假签到题题 签到"></a>K    小红的真真假假签到题题 签到</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/K">题目链接</a></strong></p><h2 id="题意：-9"><a href="#题意：-9" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-9"><a href="#题解：-9" class="headerlink" title="题解："></a>题解：</h2><p>101变成101101<br>就等于乘（2的幂次+1）一定是倍数且1的个数不同<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        s=<span class="type">char</span>(<span class="string">&#x27;0&#x27;</span>+x%<span class="number">2</span>)+s;</span><br><span class="line">        x/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=s+s;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.size(); i++) &#123;</span><br><span class="line">        ans=ans*<span class="number">2</span>+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="L-在这冷漠的世界里光光哭哭-dp【待补】"><a href="#L-在这冷漠的世界里光光哭哭-dp【待补】" class="headerlink" title="L    在这冷漠的世界里光光哭哭 dp【待补】"></a>L    在这冷漠的世界里光光哭哭 dp【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23479/L">题目链接</a></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客寒假算法基础集训营（三）全部题解</title>
      <link href="/posts/c0aea12a.html"/>
      <url>/posts/c0aea12a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="B-智乃买瓜-dp"><a href="#B-智乃买瓜-dp" class="headerlink" title="B 智乃买瓜 dp"></a>B 智乃买瓜 dp</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/B">题目链接</a></strong></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>有 $ n $ 个物品重量为 $a<a href="正偶数">i</a>$ ，可以买一整个或买一半或不买，问重量和为$1，2…m$的方案数。<br>$ (0&lt;=n&lt;=1e3，1&lt;=m&lt;=1e3, 2&lt;ai&lt;=2*1e3) $</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>$dp[i]$ 表示重量和为 $i$ 的方案数<br>转移方程为<br>$if(j&gt;=a[i]) dp[j]+=dp[j-a[i]]$ $dp[j]$从 $dp[j-a[i]]$的状态转移过来<br>$if(j&gt;=a[i]/2) dp[j]+=dp[j-a[i]/2]$</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cin&gt;&gt;a[i];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m; j&gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=a[i]) dp[j]=(dp[j]+dp[j-a[i]])%M;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=a[i]/<span class="number">2</span>) dp[j]=(dp[j]+dp[j-a[i]/<span class="number">2</span>])%M;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line">        cout&lt;&lt;dp[i]%M&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-智乃买瓜h-dp"><a href="#C-智乃买瓜h-dp" class="headerlink" title="C 智乃买瓜h dp"></a>C 智乃买瓜h dp</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/C">题目链接</a></strong></p><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>知道重量和为 $1-m$的方案数，求有几个瓜怎么样的瓜。<br>$(0&lt;=n&lt;=1e3，1&lt;=m&lt;=1e3, 2&lt;ai&lt;=2*1e3)$</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>$dp[i]$ 表示重量和为 $i$ 的方案数<br>因为 $dp[1]$ 可以确定原重量为 2 的瓜的个数<br>$dp[2]$ 可以确定原重量为 4 的瓜的个数<br>$a[i]$ 等于 i自己的个数 + 其他组合的和等于i 的方案数<br> i自己的个数 等于 $dp[i]$ - 其他组合的和等于i 的方案数<br>i的方案数已知 其他组合的和等于i的方案数就是背包过来的 </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>; </span><br><span class="line"><span class="type">int</span> in[N], inn[N];</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=n+n; i+=<span class="number">2</span>) &#123;<span class="comment">//枚举数量</span></span><br><span class="line">        <span class="type">int</span> p=((a[i/<span class="number">2</span>]-dp[i/<span class="number">2</span>]+M)%M);</span><br><span class="line">        num[i]=p; </span><br><span class="line">        cnt+=num[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=p; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=n; k&gt;=<span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;=i) dp[k]=(dp[k]+dp[k-i])%M;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;=i/<span class="number">2</span>) dp[k]=(dp[k]+dp[k-i/<span class="number">2</span>])%M;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(cnt) &#123;</span><br><span class="line">        cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n+n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=num[i]; j++) &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;n*<span class="number">2</span>+<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="E-智乃的数字积木-easy-version-暴力模拟"><a href="#E-智乃的数字积木-easy-version-暴力模拟" class="headerlink" title="E    智乃的数字积木(easy version) 暴力模拟"></a>E    智乃的数字积木(easy version) 暴力模拟</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/E">题目链接</a></strong></p><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p><img src="https://img-blog.csdnimg.cn/0bbe76c9380541abbc66e88344db4250.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXVpbm4xOA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>k好小<br>按照题意模拟<br>既然要最大的数字 就在相同颜色的块从大到小排序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> col[N]; </span><br><span class="line"><span class="built_in">set</span>&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        a[i+<span class="number">1</span>]=s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;col[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ks=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(col[i]==col[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> sort(a+ks, a+<span class="number">1</span>+i<span class="number">-1</span>, greater&lt;<span class="type">int</span>&gt;()), ks=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> o=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        o=o*<span class="number">10</span>+a[i];</span><br><span class="line">        o%=M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;o&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        <span class="type">int</span> p, q;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;q;</span><br><span class="line">        ks=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="keyword">if</span>(col[i]==p) col[i]=q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(col[i]==col[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> sort(a+ks, a+<span class="number">1</span>+i<span class="number">-1</span>, greater&lt;<span class="type">int</span>&gt;()), ks=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> o=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            o=o*<span class="number">10</span>+a[i];</span><br><span class="line">            o%=M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;o%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-智乃的数字积木-hard-version-【待补】"><a href="#F-智乃的数字积木-hard-version-【待补】" class="headerlink" title="F    智乃的数字积木(hard version) 【待补】"></a>F    智乃的数字积木(hard version) 【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/F">题目链接</a></strong></p><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#G智乃的树旋转(easy version) 思维</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**[题目链接](https:<span class="comment">//ac.nowcoder.com/acm/contest/23478/G)**</span></span><br><span class="line"></span><br><span class="line">##题意：</span><br><span class="line"></span><br><span class="line">现在智乃有一颗尺寸大小为 $N$ 二叉树，智乃对其做了一次旋转操作将其打乱，她想让你通过一次树的旋转操作将其还原.</span><br><span class="line"></span><br><span class="line">##题解：</span><br><span class="line"></span><br><span class="line">父亲-儿子 -&gt;儿子-父亲</span><br><span class="line">![在这里插入图片描述](https:<span class="comment">//img-blog.csdnimg.cn/7865a64c77a1424a8c4beb7174b68b91.png)</span></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">5</span>; </span><br><span class="line"><span class="type">int</span> a, n, b;</span><br><span class="line"><span class="type">int</span> in[N], inn[N]; </span><br><span class="line"><span class="type">signed</span> main() &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; </span><br><span class="line">        in[a]=i;</span><br><span class="line">        in[b]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b; </span><br><span class="line">        inn[a]=i;</span><br><span class="line">        inn[b]=i; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==j&amp;&amp;inn[j]==i) &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="H-智乃的树旋转-hard-version-【补】"><a href="#H-智乃的树旋转-hard-version-【补】" class="headerlink" title="H    智乃的树旋转(hard version) 【补】"></a>H    智乃的树旋转(hard version) 【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/H">题目链接</a></strong></p><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>现在智乃有一颗尺寸大小为 $N$ 二叉树，智乃对其做了一次旋转操作将其打乱，她想让你通过一系列树的旋转操作将其还原。<br>$(1&lt;=N&lt;=1e3)$</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>思考这么一个问题：如果对某一个非根节点，一直作为旋转轴进行旋转，那么最后会发生什么。<br>显然，最终该节点一定被转到了整棵树的根部。</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>想法是先把两棵树转成一样的，旋转次数就是两棵树操作次数之和。<br>怎么转成同样一棵树呢因为旋转的话中序遍历是不变的。<br>就把图的先序遍历DLR变成中序遍历LDR的样子。<br>就是转所有的左子树转转转成父亲的右子树或者转成根为止。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> F[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> R[N][<span class="number">2</span>], L[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ord[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; V;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_order</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    ord[++cnt]=x;</span><br><span class="line">    <span class="keyword">if</span>(L[x][t]) get_order(L[x][t], t);</span><br><span class="line">    <span class="keyword">if</span>(R[x][t]) get_order(R[x][t], t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">RR</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rt=F[l][t];</span><br><span class="line">    <span class="type">int</span> f=F[rt][t];</span><br><span class="line">    <span class="type">int</span> lc=R[l][t];</span><br><span class="line">    F[l][t]=f;</span><br><span class="line">    F[rt][t]=l;</span><br><span class="line">    F[lc][t]=rt;</span><br><span class="line">    R[l][t]=rt;</span><br><span class="line">    L[rt][t]=lc;</span><br><span class="line">    <span class="keyword">if</span>(L[f][t]==rt) L[f][t]=l;</span><br><span class="line">    <span class="keyword">else</span> R[f][t]=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    get_order(r, t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> f=F[ord[i]][t];</span><br><span class="line">            <span class="keyword">if</span>(f==<span class="number">0</span>||R[f][t]==ord[i]) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">1</span>) V.push_back(ord[i]);</span><br><span class="line">            <span class="keyword">else</span> S.push(f);</span><br><span class="line">            RR(ord[i], t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">1</span>; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x, y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            L[i][j]=x;R[i][j]=y;</span><br><span class="line">            <span class="keyword">if</span>(x) F[x][j]=i;</span><br><span class="line">            <span class="keyword">if</span>(y) F[y][j]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> r1=<span class="number">0</span>,r2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(F[i][<span class="number">0</span>]==<span class="number">0</span>) r1=i;</span><br><span class="line">        <span class="keyword">if</span>(F[i][<span class="number">1</span>]==<span class="number">0</span>) r2=i;</span><br><span class="line">    &#125;</span><br><span class="line">    cal(r1, <span class="number">0</span>);</span><br><span class="line">    cal(r2, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;V.size()+S.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:V) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(!S.empty()) &#123;</span><br><span class="line">        <span class="type">int</span> x=S.top();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        S.pop();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-智乃的密码-尺取-二分"><a href="#I-智乃的密码-尺取-二分" class="headerlink" title="I    智乃的密码 尺取/二分"></a>I    智乃的密码 尺取/二分</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/I">题目链接</a></strong></p><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>找到最远的合法的 r 计算 $[L， R]$范围内的ans</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> tmp,k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cn</span><span class="params">(<span class="type">char</span> a)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a&lt;=<span class="string">&#x27;9&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;a&lt;=<span class="string">&#x27;z&#x27;</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a&lt;=<span class="string">&#x27;Z&#x27;</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,l,r;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;r&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n-l;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(k&lt;n&amp;&amp;tmp&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="type">int</span> o=cn(s[k]);</span><br><span class="line">            <span class="keyword">if</span>(cnt[o]==<span class="number">0</span>)tmp++;</span><br><span class="line">            cnt[o]++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> z=min(r<span class="number">-1</span>+i,n<span class="number">-1</span>)-max(k<span class="number">-1</span>,l<span class="number">-1</span>+i)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(z&gt;=<span class="number">0</span>&amp;&amp;tmp&gt;=<span class="number">3</span>) ans+=z;</span><br><span class="line">        cnt[cn(s[i])]--;</span><br><span class="line">        <span class="keyword">if</span>(cnt[cn(s[i])]==<span class="number">0</span>)tmp--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-智乃的C语言模除方程-分类讨论【补】"><a href="#J-智乃的C语言模除方程-分类讨论【补】" class="headerlink" title="J    智乃的C语言模除方程 分类讨论【补】"></a>J    智乃的C语言模除方程 分类讨论【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23478/J">题目链接</a></strong></p><h2 id="题意：-6"><a href="#题意：-6" class="headerlink" title="题意："></a>题意：</h2><p>$x$%$P==Q,L&lt;=x&lt;=R,l&lt;=Q&lt;=r$<br>求有多少个x使得方程成立<br>$(-1e9&lt;=P,l,r,L,R&lt;=1e9)$</p><h2 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h2><p><a href="https://blog.nowcoder.net/n/96cfd281c1c34b469b1a0ae58bfa61f5"><strong>qwq</strong></a><br>$x&gt;=0时$，Q的有效区间是$[0, p-1]$<br>$x&lt;0时$，Q的有效区间是$[1-p, 0]$<br>首先[L,R]转化成[0, N]的问题<br>题目就变成查询 0 到 N 这段有多少数字<br>然后变成[0,N]内有多少个数模P在[l, r]内<br>然后算循环节和零头<br>答案就分为两个部分 一部分是 N%p的部分 另一部分是N/P 个（0~P-1）</p><p>这种区间统计的问题，边角讨论比较复杂的话，尽量别硬讨论<br>要么能转换成前缀的，算1到n，要么把边角单独处理了，然后把两个端点都放在舒服的位置，再去算<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, l, r, L, R, p; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b&lt;c||d&lt;a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(d, b)-<span class="built_in">max</span>(c, a)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">abs</span>(x/p)*<span class="built_in">gi</span>(<span class="number">1</span>-p, <span class="number">0</span>, l, r)+<span class="built_in">gi</span>((x%p), <span class="number">0</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> (x/p)*<span class="built_in">gi</span>(<span class="number">0</span>, p<span class="number">-1</span>, l, r)+<span class="built_in">gi</span>(<span class="number">0</span>, x%p, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;p&gt;&gt;l&gt;&gt;r&gt;&gt;L&gt;&gt;R;</span><br><span class="line">    p=<span class="built_in">abs</span>(p);<span class="comment">//注意</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=<span class="number">0</span>&amp;&amp;R&gt;=<span class="number">0</span>) cout&lt;&lt;<span class="built_in">query</span>(L)+<span class="built_in">query</span>(R)-<span class="built_in">query</span>(<span class="number">0</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(R&lt;<span class="number">0</span>) cout&lt;&lt;<span class="built_in">query</span>(L)-<span class="built_in">query</span>(R+<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(R)-<span class="built_in">query</span>(L<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="K-智乃的C语言模除方程-another-version-【待补】"><a href="#K-智乃的C语言模除方程-another-version-【待补】" class="headerlink" title="K    智乃的C语言模除方程(another version) 【待补】"></a>K    智乃的C语言模除方程(another version) 【待补】</h1><p>**[题目链接#总结</p><p><font color=#999AAA >  Qwq</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客寒假算法基础集训营（一）全部题解</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="A-九小时九个人九扇门-dp"><a href="#A-九小时九个人九扇门-dp" class="headerlink" title="A 九小时九个人九扇门 dp"></a>A 九小时九个人九扇门 dp</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/A">题目链接</a></strong></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>一个数字的数字根是指：将该数字各数位上的数字相加得到一个新的数，直到得到的数字小于 $10$ 为止.。设置小于 $10$ 的数字，其数字根就为其本身。<br>$k$ 个人能够打开门上数字为d的一扇数字门，当且仅当这 $k$ 个人的腕表数字之和的数字根恰好为 $d$。<br>$(1&lt;=n&lt;=1e5,1&lt;ai&lt;=1e9)$</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>$dp[i][j]$ 表示考虑了前 $i$ 个数，选择了一些数字使得数字根为 $j$ 的方案数</p><h3 id="转移方程"><a href="#转移方程" class="headerlink" title="转移方程"></a>转移方程</h3><p> 不加当前位使得数字根为 $j$ 的方案数为上一位继承来<br>$dp[i][j] += dp[i - 1][j];$<br>加上当前位使得数字根为 $f(a[i]<em>10+j)$ 的方案数为上一位继承来<br>$dp[i][f(a[i]</em>10+j)] += dp[i - 1][j];$<br>当前位的方案数+1<br>$dp[i][f(a[i])]++;$ </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">100</span>; </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">10</span>][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line"><span class="keyword">while</span>(n&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            m+=n%<span class="number">10</span>;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">a[i]=<span class="built_in">fun</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=<span class="number">9</span>; j++) &#123;</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">fun</span>(a[i]*<span class="number">10</span>+j);</span><br><span class="line">f[j][i]+=f[j][i<span class="number">-1</span>]%M;</span><br><span class="line">                f[tmp][i]=(f[tmp][i]+f[j][i<span class="number">-1</span>])%M;</span><br><span class="line">&#125;</span><br><span class="line">f[a[i]][i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">cout&lt;&lt;f[i][n]%M&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="H-牛牛看云-思维"><a href="#H-牛牛看云-思维" class="headerlink" title="H   牛牛看云 思维"></a>H   牛牛看云 思维</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/H">题目链接</a></strong></p><h2 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h2><p>求<br>$n$           $n$<br>$Σ$            $Σ$ $∣ai+a j −1000∣$<br>$i$=1         $j$=$i$<br>$(0&lt;ai&lt;=1000, n&lt;=1000000)$</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><p>因为这个 $n$ 很打，$ai$很小<br>就从 $ai$ 入手<br>记录 $ai$ 的个数枚举 $ai$<br>直接计算答案<br>假如$ai==aj$ ans=自己和自己+自己和别人 $/2$ (因为 $j$ 是从 $i$ 开始的 所以 $/2$<br>$ai!=aj$ ans=$cnt[ai]*cnt[aj]/2$ </p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x; </span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;=<span class="number">1000</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> a=g[i].<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> b=g[j].<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(i==j) &#123;</span><br><span class="line">                ans+=(a+a*(a<span class="number">-1</span>)/<span class="number">2</span>)*<span class="built_in">abs</span>(i+i<span class="number">-1000</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans+=a*b*<span class="built_in">abs</span>(i+j<span class="number">-1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-中位数切分-思维"><a href="#F-中位数切分-思维" class="headerlink" title="F   中位数切分 思维"></a>F   中位数切分 思维</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/F">题目链接</a></strong></p><h2 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h2><p>给定一个长为 $n$ 的数组 $a$ 和一个整数 $m$，求最多可以划分成多少段，使得每一段的中位数都大于等于$m$。$(1&lt;ai, m&lt;=1e9, 1&lt;=n&lt;=1e5)$</p><h2 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h2><p>原数组大于等于m的记为1，记录 $cnt1$ 个<br>小于的记为-1，记录 $cnt2$ 个<br>当一段的 $sum&gt;=1$ 的时候这一段中位数就 $&gt;=m$<br>然后就去拿 $1$ 的去中和 $-1$, 最大的段数就是先把负数中和了使得 $sum==0$ 再加上一个$1$，假如$cnt1-cnt2&lt;=0$则不存在，不然段数为 $cnt1-cnt2$个 。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-4</span>;</span><br><span class="line"><span class="type">int</span> n, m;<span class="type">int</span> a[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">         <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">         <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;=m) p++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(p-(n-p)&gt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;p-(n-p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">         <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-B站与各唱各的-数学"><a href="#I-B站与各唱各的-数学" class="headerlink" title="I   B站与各唱各的 数学"></a>I   B站与各唱各的 数学</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/I">题目链接</a></strong></p><h2 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h2><h2 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h2><p>打表呜呜呜<br>最小值是<br><img src="https://img-blog.csdnimg.cn/bfad14d0f14b4db093fa872090642eef.png" alt="在这里插入图片描述"><br>下一个数是210<br>就发现是素数的乘积$2,2<em>3,2</em>3*5$<br>因为素数乘积的数不是素数，那么他的因子也少<br>那么$H(x)$就大<br>因为素数 $x$ 的欧拉函数等于 $x-1$，那么最大值就是范围内最大的素数的$H(x)=(x-1)/x$<br>$ps:$牛客题解上说 $1e9$ 以内最大的两个素数间隔是 $282$ 就直接暴力找</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">int</span> pri[<span class="number">1000005</span>], cnt, n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_prime</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            pri[++cnt] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                vis[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> xiao[N];</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    get_prime(<span class="number">100005</span>);</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    xiao[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) &#123;</span><br><span class="line">         xiao[i]=xiao[i<span class="number">-1</span>]*pri[i]; </span><br><span class="line">         <span class="keyword">if</span>(xiao[i]&gt;=<span class="number">1e9</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=cnt; i&gt;=<span class="number">1</span>; i--)  &#123;</span><br><span class="line">            <span class="keyword">if</span>(xiao[i]&lt;=n)  &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;xiao[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123;</span><br><span class="line">                <span class="type">int</span> q=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">2</span>; j&lt;=<span class="built_in">sqrt</span>(i); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i%j==<span class="number">0</span>) &#123;</span><br><span class="line">                        q=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!q) &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-牛牛做数论-数学"><a href="#D-牛牛做数论-数学" class="headerlink" title="D 牛牛做数论 数学"></a>D 牛牛做数论 数学</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/D">题目链接</a></strong></p><h2 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h2><p>有 $n$ 位人在翻唱一首共 $m$ 句的歌曲，人不交流。一句歌词被所有人唱或者没被人唱这句歌词无效，让成功唱出的句子数尽可能多，求期望唱成功的句子数量对1e9 +7取模的结果。<br>$(1&lt;=t&lt;=1e4,1&lt;=n, m&lt;=1e9,)$</p><h2 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h2><p>$m$ 句歌词相互独立<br>设唱的概率为 $pi$ 不唱的概率为 $(1-pi)$<br>那么答案就是失败的概率就是$(p1<em>p2</em>p3<em>…</em>pn)$+$(1-p1)<em>(1-p2)</em>…<em>(1-pn)$<br>那么成功的概率就是$1-(p1</em>p2<em>p3</em>…<em>pn)$+$(1-p1)</em>(1-p2)<em>…</em>(1-pn)$<br>最大化成功就是最小化石板就要使得pi都为$1/2$ 其实是猜的不过可以验算几个<br>那么答案就等于$m<em>(1-(1/2)^n</em>2)$</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e9</span>+<span class="number">7</span>;  </span><br><span class="line">ll <span class="title function_">ksm</span><span class="params">(ll a,ll p)</span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(p)&#123;<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;res=res*a%M;&#125;a=a*a%M;p&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(m%M*(ksm(<span class="number">2</span>, n<span class="number">-1</span>)%M<span class="number">-1</span>+M)%M*ksm(ksm(<span class="number">2</span>, n<span class="number">-1</span>)%M, M<span class="number">-2</span>)%M)%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-炸鸡块君与FIFA22-倍增-分块-线段树【补】"><a href="#B-炸鸡块君与FIFA22-倍增-分块-线段树【补】" class="headerlink" title="B    炸鸡块君与FIFA22 倍增/分块/线段树【补】"></a>B    炸鸡块君与FIFA22 倍增/分块/线段树【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/B">题目链接</a></strong><br>【补】</p><h2 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h2><p>打游戏胜利将使得分加一、失败使分减一、平局使分不变。若你当前的排位分是 $3$ 的整倍数（包括0倍），则若下一局游戏失败，你的排位分将不变（而不是减一）<br>给定一个游戏结果字符串和若干次询问，你需要回答这些询问。<br>$(1&lt;=l, r&lt;=n，q&lt;=2e5,0&lt;=s&lt;=1e9)$</p><h2 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h2><p>$n,q$ 很大就想到要预处理<br>每次询问每段的答案发现只和首位的初始值%3的值有有关<br>那么预处理从每一位开始以初始值为 $0, 1, 2$开始向后进行操作，但是不能 $n*n$<br>所以就想到暴力分块<br>假如在同一个分块里就直接暴力模拟<br>不在的话<br>就在一整块和另一块以%3的值结果来转移</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> d[N][<span class="number">5</span>];<span class="comment">//dij代表第i块以j为首值处理后的结果</span></span><br><span class="line"><span class="type">int</span> bl[N], l[N], r[N];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    cin&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> B=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) bl[i]=(i+B<span class="number">-1</span>)/B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=bl[n]; i++) l[i]=r[i<span class="number">-1</span>]+<span class="number">1</span>, r[i]=r[i<span class="number">-1</span>]+B;</span><br><span class="line">    r[bl[n]]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=bl[n]; i++) &#123;</span><br><span class="line">        d[i][<span class="number">0</span>]=d[i][<span class="number">1</span>]=d[i][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=l[i]; j&lt;=r[i]; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j]==<span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                d[i][<span class="number">0</span>]++, d[i][<span class="number">1</span>]++, d[i][<span class="number">2</span>]++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[j]==<span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i][<span class="number">0</span>]%<span class="number">3</span>) d[i][<span class="number">0</span>]--;</span><br><span class="line">                <span class="keyword">if</span>((d[i][<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">3</span>) d[i][<span class="number">1</span>]--;</span><br><span class="line">                <span class="keyword">if</span>((d[i][<span class="number">2</span>]+<span class="number">2</span>)%<span class="number">3</span>) d[i][<span class="number">2</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="type">int</span> le, re, s;</span><br><span class="line">        cin&gt;&gt;le&gt;&gt;re&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(bl[le]==bl[re]) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=le; i&lt;=re; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                    s++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s%<span class="number">3</span>) s--; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=le; i&lt;=r[bl[le]]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==<span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                s++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s%<span class="number">3</span>) s--; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=bl[le]+<span class="number">1</span>; i&lt;bl[re]; i++) &#123;</span><br><span class="line">            s=s+d[i][(s+<span class="number">3</span>)%<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l[bl[re]]; i&lt;=re; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">&#x27;W&#x27;</span>) s++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s%<span class="number">3</span>) s --;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>待补</strong></p><h1 id="K-冒险公社-dp【补】"><a href="#K-冒险公社-dp【补】" class="headerlink" title="K    冒险公社 dp【补】"></a>K    冒险公社 dp【补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/K">题目链接</a></strong><br>【补】<br><a href="https://blog.csdn.net/weixin_45775438/article/details/122686542?spm=1001.2014.3001.5502"><strong>qwq</strong></a><br>发现，第 $i$ 个预测和 $[1,i−3]$ 的所有岛都没有关系，明显符合 dp 的无后效性</p><p>$dp[i][i1][i2][i3]$表示已经走了 $i$ 座山绿岛的最大数量，$i1, i2, i3$表示$i,i-1, i-2$的颜色<br>$dp[i][i1][i2][i3]$是从合法状态的$dp[i−1][i2][i3][i4]$转移过来<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>; </span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">    string s; cin&gt;&gt;s; s=<span class="string">&#x27;.&#x27;</span>+s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>; i&lt;=n; i++) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++) <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>; l&lt;<span class="number">3</span>; l++) dp[i][j][k][l]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++) <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>; l&lt;<span class="number">3</span>; l++) &#123;</span><br><span class="line">        dp[<span class="number">2</span>][j][k][l]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//if(j==1) dp[2][j][k][l]++;</span></span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">1</span>) dp[<span class="number">2</span>][j][k][l]++;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) dp[<span class="number">2</span>][j][k][l]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>; l&lt;<span class="number">3</span>; l++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> l1=<span class="number">0</span>; l1&lt;<span class="number">3</span>; l1++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j][k][l1]==<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="type">int</span> R=<span class="number">0</span>, G=<span class="number">0</span>;</span><br><span class="line">                        R=(l==<span class="number">0</span>)+(j==<span class="number">0</span>)+(k==<span class="number">0</span>);</span><br><span class="line">                        G=(l==<span class="number">1</span>)+(j==<span class="number">1</span>)+(k==<span class="number">1</span>);</span><br><span class="line">                        <span class="comment">//cout&lt;&lt;R&lt;&lt;&quot; &quot;&lt;&lt;G&lt;&lt;endl;</span></span><br><span class="line">                        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>&amp;&amp;G&lt;R) dp[i][l][j][k]=<span class="built_in">max</span>(dp[i][l][j][k], dp[i<span class="number">-1</span>][j][k][l1]+(l==<span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;G&#x27;</span>&amp;&amp;G&gt;R) dp[i][l][j][k]=<span class="built_in">max</span>(dp[i][l][j][k], dp[i<span class="number">-1</span>][j][k][l1]+(l==<span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>&amp;&amp;G==R) dp[i][l][j][k]=<span class="built_in">max</span>(dp[i][l][j][k], dp[i<span class="number">-1</span>][j][k][l1]+(l==<span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">3</span>; k++)</span><br><span class="line">        ans=<span class="built_in">max</span>(ans, dp[n][i][j][k]);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="G-ACM-is-all-you-need-【待补】"><a href="#G-ACM-is-all-you-need-【待补】" class="headerlink" title="G    ACM is all you need 【待补】"></a>G    ACM is all you need 【待补】</h1><p><strong><a href="https://ac.nowcoder.com/acm/contest/23106/G">题目链接</a></strong> </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >  Qwq</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSG - 1123 点到圆弧的距离（计算几何）</title>
      <link href="/posts/fbfb7b1c.html"/>
      <url>/posts/fbfb7b1c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>：输入一个点  P  和一条圆弧（圆周的一部分），你的任务是计算  P  到圆弧的最短距离。换句话说，你需要在圆弧上找一个点，到  P  点的距离最小。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>：呃<br>先找圆心<br>显然<br>假如点跟圆心的连线在那段扇形的圆弧范围内，点到圆弧的最短距离为点到圆心的距离减去半径然后取绝对值；不然，点到圆弧的最短的距离为到这段圆弧的两个端点的最小值。 </p><p> 那怎么判断是不是在圆弧范围内呢？</p><p> 本来想找PB和OA,OC是否有交点但是wa了好像不是精度问题<img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64af839d27b02.png" alt="在这里插入图片描述"><br> 两个点是不是在一条线的两端可以用叉积判断<br> 判断  C,D  点是否在 AB 线段两边<br> 向量 AB 和向量 AC 是顺时针，所以他们的叉积  &gt;0<br> 向量 AB 和向量 AD 是逆时针，所以他们的叉积  &lt;0<br>只要 Cross(AB,AC)*Cross(AB,AD)&lt;0 时，就是在不在同一侧<br>所以这样看， B  就在射线  AC  和  AD  中间~就可以判断 P 是否在圆环范围内<br>对于这题就可以用来判断  P 是否在  OC,OA 之间</p><p>但是上面只适用劣弧的情况 还要考虑平角和优弧的情况 反正还是用这个叉积判qaq</p><p><img src="https://img01.anheyu.com/useruploads/215/2023/07/13/64af83978791e.png" alt="在这里插入图片描述"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> PI = acos(<span class="number">-1.0</span>);</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">sgn</span>(<span class="params"><span class="built_in">double</span> x</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fabs(x) &lt; eps) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Point &#123;</span><br><span class="line">    <span class="built_in">double</span> x, y;</span><br><span class="line">    Point(<span class="built_in">double</span> x = <span class="number">0.0</span>, <span class="built_in">double</span> y = <span class="number">0.0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">typedef Point Vector; <span class="comment">//向量</span></span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A, Vector B) &#123; <span class="comment">//向量加法</span></span><br><span class="line">    <span class="keyword">return</span> Vector(A.x + B.x, A.y + B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Point A, Point B) &#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x - B.x, A.y - B.y);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A, <span class="built_in">double</span> p) &#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x * p, A.y * p);</span><br><span class="line">&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A, <span class="built_in">double</span> p) &#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x / p, A.y / p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point A, <span class="keyword">const</span> Point B) &#123;</span><br><span class="line">    <span class="keyword">return</span> A.x &lt; B.x || (sgn(A.x - B.x) == <span class="number">0</span> &amp;&amp; A.y &lt; B.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point A, <span class="keyword">const</span> Point B) &#123;</span><br><span class="line">    <span class="keyword">return</span> sgn(A.x - B.x) == <span class="number">0</span> &amp;&amp; sgn(A.y - B.y) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">Dot</span>(<span class="params">Vector A, Vector B</span>)</span> &#123;<span class="comment">//点积</span></span><br><span class="line">    <span class="keyword">return</span> A.x * B.x + A.y * B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">Cross</span>(<span class="params">Vector A, Vector B</span>)</span> &#123;<span class="comment">//向量叉积</span></span><br><span class="line">    <span class="keyword">return</span> A.x * B.y - A.y * B.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">Length</span>(<span class="params">Vector A</span>)</span> &#123;<span class="comment">//模</span></span><br><span class="line">    <span class="keyword">return</span> sqrt(Dot(A, A));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vector <span class="title">Normal</span>(<span class="params">Vector A</span>)</span> &#123;<span class="comment">//单位向量</span></span><br><span class="line">    <span class="built_in">double</span> L = Length(A);</span><br><span class="line">    <span class="keyword">return</span> Vector(-A.y / L, A.x / L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span>(<span class="params">Point P, Vector v, Point Q, Vector w</span>)</span> &#123;<span class="comment">//两直线焦点</span></span><br><span class="line">    Vector u = P - Q;</span><br><span class="line">    <span class="built_in">double</span> t = Cross(w, u) / Cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> P + v * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">double</span> <span class="title">dis</span>(<span class="params">Point a, Point b</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">signed <span class="title">main</span>()</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">double</span> x1, y1, x2, y2, x3, y3, xp, yp;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; x1 &gt;&gt;y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3 &gt;&gt; xp &gt;&gt; yp) &#123;</span><br><span class="line"></span><br><span class="line">        Point A = &#123; x1,y1 &#125;;</span><br><span class="line">        Point B = &#123; x2,y2 &#125;;</span><br><span class="line">        Point AB = &#123; (x1 + x2) / <span class="number">2</span>,(y1 + y2) / <span class="number">2</span> &#125;;</span><br><span class="line">        Point C = &#123; x3,y3 &#125;;</span><br><span class="line">        Point BC = &#123; (x3 + x2) / <span class="number">2</span>,(y3 + y2) / <span class="number">2</span> &#125;;</span><br><span class="line">        Point P = &#123; xp,yp &#125;;</span><br><span class="line">        Point O = GetLineIntersection(AB, Normal(A - B), BC, Normal(B - C));<span class="comment">//也可以用三角形外心找圆心</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> ans = min(dis(P, A), dis(P, C));</span><br><span class="line">        <span class="built_in">double</span> d = dis(O, P);</span><br><span class="line">        <span class="built_in">double</span> r = dis(O, A);</span><br><span class="line"><span class="keyword">if</span>((<span class="number">2</span>*r==dis(A, C))) &#123;</span><br><span class="line"><span class="keyword">if</span>(Cross(A-C, A-P)*Cross(A-C,A-B)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">ans=min(ans, fabs(d-r));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++t &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt;<span class="keyword">fixed</span>&lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(Cross(C-A, C-B)*Cross(C-A, C-O)&lt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(Cross(O-A, O-P)*Cross(O-A,O-C)&gt;=<span class="number">0</span>&amp;&amp;Cross(O-C, O-P)*Cross(O-C,O-A)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">ans=min(ans, fabs(d-r));</span><br><span class="line">&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!(Cross(O-A, O-P)*Cross(O-A,O-C)&gt;=<span class="number">0</span>&amp;&amp;Cross(O-C, O-P)*Cross(O-C,O-A)&gt;=<span class="number">0</span>)) &#123;</span><br><span class="line">ans=min(ans, fabs(d-r));</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++t &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt;<span class="keyword">fixed</span>&lt;&lt; setprecision(<span class="number">3</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一道计算几何 暖你一整天</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客挑战赛 46 B最下的指数（分解质因子，分类讨论）</title>
      <link href="/posts/ce1d8c1b.html"/>
      <url>/posts/ce1d8c1b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="题目链接：最小的指数"><a href="#题目链接：最小的指数" class="headerlink" title="题目链接：最小的指数"></a><a href="https://ac.nowcoder.com/acm/contest/9510/B"><strong>题目链接：最小的指数</strong></a></h1><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>牛妹手里捧着 T 个数，对于每个数x，将其分解质因数，并输出它的质因子指数的最小值。<br>形式化地，对于数x = p1^a1 * p2^a2 … pk^ak，输出min{a1,a2…ak}。<br>1&lt;=T&lt;=100000 , 1&lt;=n&lt;=1018</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>首先想到素数的话min=1 <a href="https://www.cnblogs.com/zhanhonhao/p/11257962.html"><strong>米勒罗宾素数检测（Miller-Rabin）</strong></a><br>然后min&lt;=64<br>然后指数&lt;=sqrt(1e18)<br>然后假设min==6就可以小范围素数筛搞搞<br>T=1e5<br>所以把1e4内的质数筛出来, 每次先把 $n$, 变成 $1$ 或者 $&gt;1e4$ 的数<br>对于剩下的数大于 $1e4$ 的剩下的答案无非是 1,2,3,4</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="type">int</span> prime[N];</span><br><span class="line"><span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">10005</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=tot; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*prime[j]&gt;<span class="number">10000</span>) <span class="keyword">break</span>;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">prim</span>();</span><br><span class="line">    <span class="comment">//cout&lt;&lt;tot&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1e18</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=tot; i++) &#123;</span><br><span class="line">            <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>) &#123;</span><br><span class="line">                n/=prime[i];</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt) ans=<span class="built_in">min</span>(ans, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">10000</span>) &#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">            <span class="type">int</span> c=(<span class="built_in">pow</span>(n*<span class="number">1.0</span>, <span class="number">1.0</span>/<span class="number">3</span>)+<span class="number">0.1</span>);<span class="comment">//卡精度了 可以在外面预处理三次方</span></span><br><span class="line">            <span class="type">int</span> b=<span class="built_in">sqrt</span>(a);</span><br><span class="line">            <span class="keyword">if</span>(b*b*b*b==n) ans=<span class="built_in">min</span>(ans, <span class="number">4ll</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c*c*c==n) ans=<span class="built_in">min</span>(ans, <span class="number">3ll</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a*a==n) ans=<span class="built_in">min</span>(ans, <span class="number">2ll</span>);</span><br><span class="line">            <span class="keyword">else</span> ans=<span class="built_in">min</span>(ans, <span class="number">1ll</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><font color=#999AAA >提示：这里对文章进行总结：<br>例如：以上就是今天要讲的内容，本文仅仅简单介绍了pandas的使用，而pandas提供了大量能使我们快速便捷地处理数据的函数和方法。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分类讨论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构————图的连通性算法</title>
      <link href="/posts/eb33bc3c.html"/>
      <url>/posts/eb33bc3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p><strong>割点</strong>：无向连通图，删除这个点和这个点关联的边，图不连通</p><p><strong>点双连通图</strong>：无向连通图，没有割点出现</p><p><strong>桥</strong>：无向连通图，删除某条边，图不连通</p><p><strong>边双连通图</strong>：无向连通图，没有桥</p><p><strong>时间戳</strong>：对一个图做深度优先搜索的时候，第一次访问某个点的时间</p><p><strong>强连通分量</strong>：有向图任意两点都可互相到达</p><p>​        </p><h1 id="求割点和点连通分量"><a href="#求割点和点连通分量" class="headerlink" title="求割点和点连通分量"></a>求割点和点连通分量</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn]; <span class="comment">// dfn记录时间戳</span></span><br><span class="line"><span class="comment">// low(u)来表示 u 以及其后代 **最多经过** 一条反向边能回到的最早的点的时间戳</span></span><br><span class="line"><span class="type">int</span> bcc_cnt = <span class="number">0</span>;  <span class="comment">// 点双连通分量数量</span></span><br><span class="line"><span class="type">bool</span> iscut[maxn];  <span class="comment">// 标记是否是割点</span></span><br><span class="line"><span class="type">bool</span> vis[maxn&lt;&lt;<span class="number">1</span>]; <span class="comment">// 记录这条边是不是访问过了处理重编</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="type">int</span>&gt; bcc[maxn];  <span class="comment">// 记录每个点双连通分量里面的点</span></span><br><span class="line"><span class="built_in">stack</span>&lt;edge&gt; S; <span class="comment">// 记录连通分量的点集</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> &#123;</span><br><span class="line">    dfn[u] = low[u] = ++times;</span><br><span class="line">    <span class="type">int</span> child = <span class="number">0</span>;  <span class="comment">// 用来处理根结点子结点数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p[u]; i != <span class="number">-1</span>; i = E[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span>(vis[i])<span class="keyword">continue</span>;</span><br><span class="line">        vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) &#123;  <span class="comment">// v 没有被访问过，u, v 是树边</span></span><br><span class="line">            S.push(E[i]);</span><br><span class="line">            ++child;</span><br><span class="line">            dfs(v, u);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">            <span class="comment">/*if(low[v]&gt;dfn[u]) 桥++；*/</span></span><br><span class="line">            <span class="keyword">if</span> (low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">            <span class="comment">// 当且仅当 u 存在一个子结点 v，使得 v 及其所有后代都没有反向边连回 u 的**祖先**（不包括 u）</span></span><br><span class="line">                iscut[u] = <span class="literal">true</span>;</span><br><span class="line">                ++bcc_cnt;  <span class="comment">// 增加一个点双连通分量</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    edge x = S.top();</span><br><span class="line">                    S.pop();</span><br><span class="line">                    bcc[bcc_cnt].insert(x.u);</span><br><span class="line">                    bcc[bcc_cnt].insert(x.v);</span><br><span class="line">                    <span class="keyword">if</span> (x.u == u &amp;&amp; x.v == v) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;  <span class="comment">// 反向边，注意 v == fa 的时候，是访问重复的边</span></span><br><span class="line">            S.push(E[i]);</span><br><span class="line">            low[u] = min(low[u], dfn[v]);<span class="comment">// 初始的时候，low(u) = dfn(u)low(u)=dfn(u)，我们认为自己当然可以回到自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fa &lt; <span class="number">0</span> &amp;&amp; child == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// fa &lt; 0 表示根结点，之前根结点一定被标记为割点, 取消之</span></span><br><span class="line">        <span class="comment">//对于树根来说当且仅当它有两个或者更多的子结点的时候，它才是割点</span></span><br><span class="line">        iscut[u] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通建图输出点霜</span></span><br><span class="line"><span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</span><br><span class="line">    times=bcc_cnt=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;bcc_cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=bcc_cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it=bcc[i].begin(); it!=bcc[i].end(); it++) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*it)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>emm<br>例题<br><a href="https://vjudge.net/problem/HDU-3394/origin"><strong>铁路</strong></a><br>一直t不知道为啥<br>55看队长的题解</p><font color=#999AAA ><h1 id="桥和边连通分量"><a href="#桥和边连通分量" class="headerlink" title="桥和边连通分量"></a>桥和边连通分量</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn];</span><br><span class="line"><span class="type">int</span> bcc_cnt = <span class="number">0</span>;        <span class="comment">// 边双连通分量数量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; bcc[maxn];  <span class="comment">// 记录每个点双连通分量里面的点 因为就经过一次就装在vector里</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> &#123;</span><br><span class="line">    dfn[u] = low[u] = ++times;</span><br><span class="line">    S.push(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p[u]; i != <span class="number">-1</span>; i = E[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) &#123;  <span class="comment">// v 没有被访问过，u, v 是树边</span></span><br><span class="line">            dfs(v, u);</span><br><span class="line">            low[u] = min(low[u], low[v]);<span class="comment">// 根据low数组的含义</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*if(low[v]&gt;dfn[u]) 桥++；*/</span></span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dfn[v] &lt; dfn[u] &amp;&amp; v != fa) &#123;  <span class="comment">// 反向边，注意 v == fa 的时候，是访问重复的边</span></span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;  <span class="comment">// 此时 u 是根结点或者 fa -&gt; u 是桥</span></span><br><span class="line">        ++bcc_cnt;           <span class="comment">// 增加一个边双连通分量</span></span><br><span class="line">        <span class="keyword">while</span> (!S.empty()) &#123;  <span class="comment">//从栈中弹出 u 及 u 之后的顶点</span></span><br><span class="line">            <span class="type">int</span> x = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            bcc[bcc_cnt].push_back(x);</span><br><span class="line">            <span class="keyword">if</span> (x == u) <span class="keyword">break</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        insert(u, v);</span><br><span class="line">        insert(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</span><br><span class="line">    times=bcc_cnt=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bcc_cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= bcc_cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; bcc[i].size(); j++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; bcc[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">// 输出边双</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题<br><a href="https://vjudge.net/contest/448102#problem/G"><strong>Redundant Paths</strong> </a><br>题意： 添加最少的边使这棵树上所有的链都变成环<br>缩点后是一棵树 贪心 注意重边标记</p><p>对于无向图的缩点，由于是无向图，所以要从u到v建一条边，又要从v到u建一条边，但是，在tarjan时会有两条边重复，这是一个麻烦，而且，还不得不建两条边，这该怎么办呢？<br>解决的方法就是，当同一条无向边的两条有向边的其中一条走过时，把另一条同时赋值为走过，这就要用到一个神奇的公式，^ 1。<br> 举例来说，<br> 0 ^ 1=1, 1 ^ 1=0;<br> 2 ^ 1=3, 3 ^ 1=2;<br> 4 ^ 1=5, 5 ^ 1=4;<br> 而建边的时候，一条无向边的两条有向边刚好相差1</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">1010</span>;  </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">110</span>; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125; E[maxm];</span><br><span class="line"><span class="type">int</span> p[maxn], eid = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    eid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">    E[eid].u = u;</span><br><span class="line">    E[eid].v = v;</span><br><span class="line">    E[eid].next = p[u];</span><br><span class="line">    p[u] = eid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn];</span><br><span class="line"><span class="type">int</span> bc[maxm], in[maxn], chu[maxn];</span><br><span class="line"><span class="type">int</span> bcc_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; bcc[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; S;</span><br><span class="line"><span class="type">bool</span> vis[maxm&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">    dfn[u] = low[u] = ++times;</span><br><span class="line">    S.push(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p[u]; i != <span class="number">-1</span>; i = E[i].next) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) &#123;<span class="comment">// 拿vis数组来标记是否经过 解决重边问题 然后缩点处理</span></span><br><span class="line">vis[i]=vis[i^<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> v = E[i].v;</span><br><span class="line"><span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) &#123;</span><br><span class="line">dfs(v);</span><br><span class="line">low[u] = min(low[u], low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">low[u] = min(low[u], dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">        ++bcc_cnt;</span><br><span class="line">        <span class="keyword">while</span> (!S.empty()) &#123;</span><br><span class="line">            <span class="type">int</span> x = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            bc[x]=bcc_cnt; <span class="comment">// 标记这个点是那个边双里的</span></span><br><span class="line">            bcc[bcc_cnt].push_back(x);</span><br><span class="line">            <span class="keyword">if</span> (x == u) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        insert(u, v);</span><br><span class="line">        insert(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</span><br><span class="line">    times=bcc_cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) <span class="keyword">if</span> (!dfn[i]) dfs(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>; u&lt;=n; u++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=p[u]; i!=<span class="number">-1</span>; i=E[i].next) &#123;</span><br><span class="line"><span class="type">int</span> v=E[i].v;</span><br><span class="line"><span class="keyword">if</span>(bc[v]!=bc[u]) &#123;</span><br><span class="line">in[bc[v]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=bcc_cnt; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">1</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(ans+<span class="number">1</span>)/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;<span class="comment">// 最后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h1><p>复杂度（V+E）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">1010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="type">int</span> next;</span><br><span class="line">&#125; E[maxm];</span><br><span class="line"><span class="type">int</span> p[maxn], eid = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">-1</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    eid = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">    E[eid].v = v;</span><br><span class="line">    E[eid].next = p[u];</span><br><span class="line">    p[u] = eid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> times = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dfn[maxn], low[maxn];</span><br><span class="line"><span class="type">int</span> scc_cnt = <span class="number">0</span>;  <span class="comment">// 强连通分量数量</span></span><br><span class="line"><span class="type">int</span> sccno[maxn];  <span class="comment">// 记录每个点属于的强连通分量的编号</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="type">int</span>&gt; scc[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; S;<span class="comment">// 把点压入栈中 因为每个点只属于一个强连通分量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span> <span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">    dfn[u] = low[u] = ++times;</span><br><span class="line">    S.push(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p[u]; i != <span class="number">-1</span>; i = E[i].next) &#123;</span><br><span class="line">        <span class="type">int</span> v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) &#123;  <span class="comment">// v 没有被访问过，u, v 是树边</span></span><br><span class="line">            dfs(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[v]) &#123;  <span class="comment">// 对于已经求出 scc 的点，直接删除</span></span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;  <span class="comment">// 说明 u 是第一个被探测到的点</span></span><br><span class="line">        ++scc_cnt;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = S.top();</span><br><span class="line">            S.pop();</span><br><span class="line">            sccno[x] = scc_cnt;<span class="comment">// 记录这个点在哪个连通分量</span></span><br><span class="line">            scc[scc_cnt].insert(x);</span><br><span class="line">            <span class="keyword">if</span> (x == u) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*缩点</span></span><br><span class="line"><span class="comment">edge new_E[maxm];</span></span><br><span class="line"><span class="comment">int new_p[maxn], new_eid=0;</span></span><br><span class="line"><span class="comment">void new_init() &#123;</span></span><br><span class="line"><span class="comment">    memset(new_p, -1, sizeof(new_p));</span></span><br><span class="line"><span class="comment">    new_eid=0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">void new_insert(int u, int v) &#123;</span></span><br><span class="line"><span class="comment">    new_E[new_eid].v=v;</span></span><br><span class="line"><span class="comment">    new_E[new_eid].next=new_p[u];</span></span><br><span class="line"><span class="comment">    new_p[u]=new_eid++;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        insert(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span>(dfn));</span><br><span class="line">    <span class="built_in">memset</span>(sccno, <span class="number">0</span>, <span class="keyword">sizeof</span>(sccno));</span><br><span class="line">    times = scc_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;  <span class="comment">// 每个点都要尝试 dfs 一次</span></span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/* 缩点</span></span><br><span class="line"><span class="comment"> new_init();</span></span><br><span class="line"><span class="comment">    for(int u=1; u&lt;=n; ++u) &#123;</span></span><br><span class="line"><span class="comment">        for(int i=p[u]; i!=-1; i=E[i].next) &#123;</span></span><br><span class="line"><span class="comment">            int v=E[i].v;</span></span><br><span class="line"><span class="comment">            if(sccno[u]!=sccno[v]) &#123;</span></span><br><span class="line"><span class="comment">                new_insert(sccno[u], sccno[v]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; scc_cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= scc_cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it = scc[i].begin(); it != scc[i].end(); ++it) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (*it) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">// 输出连通分量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>例题<br><a href="https://vjudge.net/problem/HDU-1269/origin"><strong>迷宫</strong></a><br>裸板子判断是不是强连通图<br><a href="https://vjudge.net/problem/HDU-5934/origin"><strong>炸弹</strong></a><br>本来想用并查集但是情况复杂的多<br><a href="https://vjudge.net/problem/POJ-1236/origin"><strong>学校</strong></a><br>题意：添加尽可能少的边使新图强连通：</p><p>我们先求出强连通分量，然后缩点得到一个DAG，假设新图上有a个结点的入度为0，有b个节点的出度为0，ans=max(a, b)(出度为0的点连入入度为0的点);<br>特殊情况：原图本身是强连通的时候答案是0不是1</p><h1 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h1><p><a href="https://www.luogu.com.cn/problem/P1341"><strong>无序字母对</strong></a></p><h1 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h1><p><a href="https://oi-wiki.org/"><strong>模板</strong></a></p><p><a href="https://vjudge.net/problem/HDU-2121/origin"><strong>冰激凌世界</strong></a><br><a href="https://vjudge.net/problem/POJ-3164/origin"><strong>网络</strong></a></p><p>&lt;hr style=” border:solid; width:100px; height:1px;” color=#000000 size=1”&gt;</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>bshd<br>看题面不知道怎么转化成图的连通性问题 板子也不熟</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类📃</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>{"name":"望千鱼`Blog","short_name":"王千予","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链🧑‍🤝‍🧑</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><div class='checkbox cyan'><input type="radio" />            <p><strong>昵称：</strong>WQY</p>            </div> <div class='checkbox cyan'><input type="radio" />            <p><strong>性别：</strong>👧</p>            </div> <div class='checkbox cyan'><input type="radio" />            <p><strong>生日：</strong>200x.02.04</p>            </div> <div class='checkbox cyan'><input type="radio" />            <p><strong>身份：</strong>浙江师范大学在读大学生</p>            </div> <div class='checkbox cyan'><input type="radio" />            <p><strong>地点：</strong>浙江</p>            </div> <div class='checkbox cyan'><input type="radio" />            <p><strong>邮箱：</strong>wang qianyu@zjnu.edu.cn</p>            </div> ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}#home_top {  margin: 1rem auto 0;  padding: 0px 15px;  max-width: 1170px;  width: 100%;}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}/* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}/* 页脚透明 */#footer {  background: transparent !important;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/categorybar.css"/>
      <url>/css/categorybar.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>#categoryBar {  width: 100% !important;}ul.categoryBar-list {  margin: 5px 5px 0 5px !important;  padding: 0 !important;}li.categoryBar-list-item {  font-weight: bold;  display: inline-block;  height: 180px !important;  margin: 5px 0.5% 0 0.5% !important;  background-image: linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);  border-radius: 10px;  padding: 25px 0 25px 25px !important;  box-shadow: rgba(50,50,50,0.3) 50px 50px 50px 50px inset;  overflow: hidden;  background-size: 100% !important;  background-position: center !important;}li.categoryBar-list-item:hover {  background-size: 110% !important;  box-shadow: inset 500px 50px 50px 50px rgba(50,50,50,0.6);}li.categoryBar-list-item:hover span.categoryBar-list-descr {  transition: all 0.5s;  transform: translate(-100%, 0);}a.categoryBar-list-link {  color: #fff !important;  font-size: 20px !important;}a.categoryBar-list-link::before {  content: '|' !important;  color: #fff !important;  font-size: 20px !important;}a.categoryBar-list-link:after {  content: '';  position: relative;  width: 0;  bottom: 0;  display: block;  height: 3px;  border-radius: 3px;  background-color: #fff;}a.categoryBar-list-link:hover:after {  width: 90%;  left: 1%;  transition: all 0.5s;}span.categoryBar-list-count {  display: block !important;  color: #fff !important;  font-size: 20px !important;}span.categoryBar-list-count::before {  content: '\f02d' !important;  padding-right: 15px !important;  display: inline-block;  font-weight: 600;  font-style: normal;  font-variant: normal;  font-family: 'Font Awesome 6 Free';  text-rendering: auto;  -webkit-font-smoothing: antialiased;}span.categoryBar-list-descr {  padding: 5px;  display: block !important;  color: #fff !important;  font-size: 20px !important;  position: relative;  right: -100%;}@media screen and (max-width: 650px) {  li.categoryBar-list-item {    width: 48% !important;    height: 150px !important;    margin: 5px 1% 0 1% !important;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/background.css"/>
      <url>/css/background.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>#web_bg {  background: -webkit-linear-gradient(    0deg,    rgba(247, 149, 51, 0.1) 0,    rgba(243, 112, 85, 0.1) 15%,    rgba(239, 78, 123, 0.1) 30%,    rgba(161, 102, 171, 0.1) 44%,    rgba(80, 115, 184, 0.1) 58%,    rgba(16, 152, 173, 0.1) 72%,    rgba(7, 179, 155, 0.1) 86%,    rgba(109, 186, 130, 0.1) 100%  );  background: -moz-linear-gradient(    0deg,    rgba(247, 149, 51, 0.1) 0,    rgba(243, 112, 85, 0.1) 15%,    rgba(239, 78, 123, 0.1) 30%,    rgba(161, 102, 171, 0.1) 44%,    rgba(80, 115, 184, 0.1) 58%,    rgba(16, 152, 173, 0.1) 72%,    rgba(7, 179, 155, 0.1) 86%,    rgba(109, 186, 130, 0.1) 100%  );  background: -o-linear-gradient(    0deg,    rgba(247, 149, 51, 0.1) 0,    rgba(243, 112, 85, 0.1) 15%,    rgba(239, 78, 123, 0.1) 30%,    rgba(161, 102, 171, 0.1) 44%,    rgba(80, 115, 184, 0.1) 58%,    rgba(16, 152, 173, 0.1) 72%,    rgba(7, 179, 155, 0.1) 86%,    rgba(109, 186, 130, 0.1) 100%  );  background: -ms-linear-gradient(    0deg,    rgba(247, 149, 51, 0.1) 0,    rgba(243, 112, 85, 0.1) 15%,    rgba(239, 78, 123, 0.1) 30%,    rgba(161, 102, 171, 0.1) 44%,    rgba(80, 115, 184, 0.1) 58%,    rgba(16, 152, 173, 0.1) 72%,    rgba(7, 179, 155, 0.1) 86%,    rgba(109, 186, 130, 0.1) 100%  );  background: linear-gradient(    90deg,    rgba(247, 149, 51, 0.1) 0,    rgba(243, 112, 85, 0.1) 15%,    rgba(239, 78, 123, 0.1) 30%,    rgba(161, 102, 171, 0.1) 44%,    rgba(80, 115, 184, 0.1) 58%,    rgba(16, 152, 173, 0.1) 72%,    rgba(7, 179, 155, 0.1) 86%,    rgba(109, 186, 130, 0.1) 100%  );}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签🏷️</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: $button-hover-color;}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(      circle at 45% 92%,      rgba(3, 16, 50, 0.4) 0.04rem,      transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at        65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: "";  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(            --coin-rotation-multiplier          ) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(      to bottom,      #fcfaf9 44%,      transparent 44%,      transparent 65%,      #fcfaf9 65%,      #fcfaf9 71%,      #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9        47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent        72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent        35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent        calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(              --shine-bg-multiplier            ) + 50%));  content: "";  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))    rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: "";  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.js"/>
      <url>/css/coin/coin.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
  
</search>
